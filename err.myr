use std

pkg qc =
	type srcloc = struct
		file	: byte[:]
		line	: int
		col	: int
	;;

	const ifmt	: (sb : std.strbuf#, ind : int, fmt : byte[:], args : ... -> void)
	$noret const err	: (loc : srcloc, msg : byte[:], args : ... -> void)
	$noret const verr	: (loc : srcloc, msg : byte[:], args : std.valist# -> void)
;;

const err = {loc, msg, args
	var ap, sb, ln
	
	ap = std.vastart(&args)
	sb = std.mksb()
	std.sbfmtv(sb, msg, &ap)
	ln = std.sbfin(sb)
	std.fatal("{}:{}:{}: {}\n", loc.file, loc.line, loc.col, ln)
	std.slfree(ln)
}

const verr = {loc, msg, ap
	var sb, ln

	sb = std.mksb()
	std.sbfmtv(sb, msg, ap)
	ln = std.sbfin(sb)
	std.fatal("{}: {}\n", loc, ln)
	std.slfree(ln)
}

const ifmt = {sb, ind, fmt, args : ...
	var ap

	ap = std.vastart(&args)
	for var i = 0; i < ind; i++
		std.sbputs(sb, "  ")
	;;
	std.sbfmtv(sb, fmt, &ap)
}

const posfmt = {sb, ap, opts
	var loc : srcloc

	loc = std.vanext(ap)
	std.sbfmt(sb, "{}:{}:{}", loc.file, loc.line, loc.col)
}

const __init__ = {
	var dummy : srcloc

	dummy = [.file="", .line=0, .col=0]
	std.fmtinstall(std.typeof(dummy), posfmt, [][:])
}

