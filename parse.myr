use std
use "tok"
use "err"
use "ctypes"
use "ast"
use "fold"

pkg qc =
	const parse : (ts : tokstream# -> node#[:])
;;

const mklocal = {p, name, ty
	var l
	
	l = std.mk([.ty=ty, .name=name, .sc=`Sclasslocal])
	std.slpush(&p.curfunc.locals, l)
	-> l
}

const mkglobal = {p, name, ty
	var g
	
	g = std.mk([.ty=ty, .name=name, .sc=`Sclassglobal])
	-> g
}

const mkenumsym = {p, name, ty
	var e
	
	e = std.mk([.ty=ty, .name=name, .sc=`Sclassenum])
	-> e
}


type lblstate = union
	`Lblforward (srcloc, int)
	`Lbldefined int
;;

type tagty = int
const tagstruct : tagty = 0
const tagunion : tagty = 1
const tagenum : tagty = 2

type parser = struct
	ts : tokstream#
	toks : (srcloc, tok)[2]
	symtab : std.htab(byte[:], sym#)#[:]
	typetab : std.htab(byte[:], ctype)#[:]
	tagtab : std.htab(byte[:], (tagty, ctype))#[:]
	lbltab : std.htab(byte[:], lblstate)#
	breaks : int[:]
	conts : int[:]
	switchs : switchstmt#[:]
	curfunc : func#
;;

const inglobalscope = {p
	-> p.symtab.len == 1
}

const pushbreakcont = {p, blbl, clbl
	std.slpush(&p.breaks, blbl)
	std.slpush(&p.conts, clbl)
}

const popbreakcont = {p
	std.slpop(&p.breaks)
	std.slpop(&p.conts)
}

const pushscope = {p
	std.slpush(&p.symtab, std.mkht(std.strhash, std.streq))
	std.slpush(&p.typetab, std.mkht(std.strhash, std.streq))
	std.slpush(&p.tagtab, std.mkht(std.strhash, std.streq))
}

const popscope = {p
	var symtab, typetab, tagtab
	
	symtab = std.slpop(&p.symtab)
	typetab = std.slpop(&p.typetab)
	tagtab = std.slpop(&p.tagtab)
	std.htfree(symtab)
	std.htfree(typetab)
	std.htfree(tagtab)
}

const declaretag = {p, name, tag
	if std.hthas(p.tagtab[p.tagtab.len-1], name)
		-> false
	;;
	std.htput(p.tagtab[p.tagtab.len-1], name, tag)
	-> true
}

const lookuptag = {p, name
	for var i = p.tagtab.len-1; i >= 0 ; i--
		match std.htget(p.tagtab[i], name)
		| `std.Some tag:
			-> `std.Some tag
		| `std.None:
		;;
	;;
	-> `std.None
}

const lookuptype = {p, name
	for var i = p.typetab.len-1; i >= 0 ; i--
		match std.htget(p.typetab[i], name)
		| `std.Some ty:
			-> `std.Some ty
		| `std.None:
		;;
	;;
	-> `std.None
}

const declare = {p, name, sym
	if std.hthas(p.symtab[p.symtab.len-1], name)
		-> false
	;;
	std.htput(p.symtab[p.symtab.len-1], name, sym)
	-> true
}

const declaretype = {p, name, ty
	if std.hthas(p.typetab[p.typetab.len-1], name)
		-> false
	;;
	std.htput(p.typetab[p.typetab.len-1], name, ty)
	-> true
}

const lookup = {p, name
	for var i = p.symtab.len-1; i >= 0 ; i--
		match std.htget(p.symtab[i], name)
		| `std.Some sym:
			-> `std.Some sym
		| `std.None:
		;;
	;;
	-> `std.None
}

const parse = {ts
	var p : parser#
	var globals
	
	p = std.mk([
		.ts = ts,
		.symtab = [][:],
		.tagtab = [][:],
		.typetab = [][:],
		.breaks = [][:],
		.conts = [][:],
		.switchs = [][:],
	])
	pushscope(p)
	p.toks[0] = toknext(ts)
	p.toks[1] = toknext(ts)
	
	globals = [][:]
	while true
		match peek(p)
		| (_, `Teof):
			break
		| _:
			std.slpush(&globals, parsedeclaration(p))
		;;
	;;
	-> globals
}

const next = {p
	var t = p.toks[0]
	p.toks[0] = p.toks[1]
	p.toks[1] = toknext(p.ts)
	-> t
}

const peek = {p
	-> p.toks[0]
}

const lookahead = {p
	-> p.toks[1]
}

const parsetype = {p
	match next(p)
	| (_, `Tint):
		-> `Tyint
	| (l, _):
		err(l, "expected type\n")
	;;
}

const expectobrace = {p
	match next(p)
	| (_, `Tobrace):
	| (l, _):
		err(l, "expected '{'")
	;;
}

const expectcbrace = {p
	match next(p)
	| (_, `Tcbrace):
	| (l, _):
		err(l, "expected '}'")
	;;
}

const expectoparen = {p
	match next(p)
	| (_, `Toparen):
	| (l, _):
		err(l, "expected '('\n")
	;;
}

const expectcparen = {p
	match next(p)
	| (_, `Tcparen):
	| (l, _):
		err(l, "expected ')'")
	;;
}

const expectcsqbrac = {p
	match next(p)
	| (_, `Tcsqbrac):
	| (l, _):
		err(l, "expected ']'\n")
	;;
}

const parseif = {p
	var cond, iftrue, iffalse
	
	next(p)
	expectoparen(p)
	cond = parseexpr(p)
	expectcparen(p)
	iftrue = parsestmt(p)
	match peek(p)
	| (_, `Telse):
		next(p)
		iffalse = `std.Some parsestmt(p)
	| _:
		iffalse = `std.None
	;;
	-> std.mk(`Sif [
		.cond=cond,
		.iftrue=iftrue,
		.iffalse=iffalse,
		.truelbl=nextlbl(p.curfunc),
		.falselbl=nextlbl(p.curfunc),
		.donelbl=nextlbl(p.curfunc),
	])
}

const parsewhile = {p
	var cond, stmt
	var breaklbl, contlbl
	
	next(p)
	expectoparen(p)
	cond = parseexpr(p)
	expectcparen(p)
	breaklbl = nextlbl(p.curfunc)
	contlbl = nextlbl(p.curfunc)
	pushbreakcont(p, breaklbl, contlbl)
	stmt = parsestmt(p)
	popbreakcont(p)
	
	-> std.mk(`Swhile [
		.cond=cond,
		.stmt=stmt,
		.contlbl=contlbl,
		.stmtlbl=nextlbl(p.curfunc),
		.breaklbl=breaklbl,
	])
}

const parsedowhile = {p
	var cond, stmt
	var breaklbl, contlbl
	
	
	next(p)
	breaklbl = nextlbl(p.curfunc)
	contlbl = nextlbl(p.curfunc)
	pushbreakcont(p, breaklbl, contlbl)
	stmt = parsestmt(p)
	popbreakcont(p)
	match next(p)
	| (_, `Twhile):
	| (l, _):
		err(l, "expected 'while'\n")
	;;
	expectoparen(p)
	cond = parseexpr(p)
	expectcparen(p)
	expectsemi(p)
	
	-> std.mk(`Sdowhile [
		.cond=cond,
		.stmt=stmt,
		.contlbl=contlbl,
		.stmtlbl=nextlbl(p.curfunc),
		.breaklbl=breaklbl,
	])
}

const parsefor = {p
	var forstmt
	
	next(p)
	expectoparen(p)
	match peek(p)
	| (_, `Tsemi):
		forstmt.init = `std.None
		next(p)
	| _:
		forstmt.init = `std.Some parseexpr(p)
		expectsemi(p)
	;;
	match peek(p)
	| (_, `Tsemi):
		forstmt.cond = `std.None
		next(p)
	| _:
		forstmt.cond = `std.Some parseexpr(p)
		expectsemi(p)
	;;
	match peek(p)
	| (_, `Tcparen):
		forstmt.step = `std.None
		next(p)
	| _:
		forstmt.step = `std.Some parseexpr(p)
		expectcparen(p)
	;;
	forstmt.contlbl=nextlbl(p.curfunc)
	forstmt.stmtlbl=nextlbl(p.curfunc)
	forstmt.breaklbl=nextlbl(p.curfunc)
	pushbreakcont(p, forstmt.breaklbl, forstmt.contlbl)
	forstmt.stmt = parsestmt(p)
	popbreakcont(p)
	
	-> std.mk(`Sfor forstmt)
}

const parseblock = {p
	var stmts
	
	stmts = [][:]
	match next(p)
	| (l, `Tobrace):
	| (l, t):
		err(l, "expected '{{', got {}\n", t)
	;;
	pushscope(p)
	while true
		match peek(p)
		| (_, `Tcbrace):
			next(p)
			break
		| _:
			std.slpush(&stmts, parsedeclorstmt(p))
		;;
	;;
	popscope(p)
	-> stmts
}

const expectcolon = {p
	match next(p)
	| (l, `Tcolon):
	| (l, t):
		err(l, "expected ':', got {}", t)
	;;
}

const expectsemi = {p
	match next(p)
	| (l, `Tsemi):
	| (l, t):
		err(l, "expected ';', got {}", t)
	;;
}


const startoftype = {p, tok
	match tok
	| `Tenum: -> true
	| `Tstruct: -> true
	| `Tunion: -> true
	| `Tchar: -> true
	// | `Tshort: -> true
	| `Tint: -> true
	| `Tlong: -> true
	// | `Tyunsigned: -> true
	// | `Tysigned: -> true
	| `Tvoid: -> true
	| `Tident n:
		match lookuptype(p, n)
		| `std.Some _:
			-> true
		| _:
			-> false
		;;
	| _:
		-> false
	;;
}


const startofdecl = {p
	var tok
	
	(_, tok) = peek(p)
	-> startoftype(p, tok)
}

const parsetagtype = {p
	var tagloc, tagname
	var tag, ty, tok
	
	match next(p)
	| (l, `Tstruct):
		tagloc = l
		tag = tagstruct
	| (l, `Tunion):
		tagloc = l
		tag = tagunion
	| (l, `Tenum):
		tagloc = l
		tag = tagenum
	| (l, _):
		err(l, "expected struct/union/enum\n")
	;;
	
	match peek(p)
	| (_, `Tident tname):
		next(p)
		tagname = `std.Some tname
	| (l, _):
		tagname = `std.None
	;;
	
	(_, tok) = peek(p)
	match (tagname, tok)
	| (`std.Some name, `Tobrace):
		match std.htget(p.tagtab[p.tagtab.len - 1], name)
		| `std.Some (oldtag, oldty):
			if tag != oldtag
				err(tagloc, "struct/union/enum accessed with wrong tag type")
			;;
			match oldty
			| `Tystruct pbody:
				match pbody
				| &(`std.Some _):
					err(tagloc, "redefinition of tag {}", name)
				| &(`std.None):
				;;
				parsestructbody(p, pbody, tag == tagunion)
				-> `Tystruct pbody
			| `Tyenum pbody:
				match pbody
				| &(`std.Some _):
					err(tagloc, "redefinition of tag {}", name)
				| &(`std.None):
				;;
				parseenumbody(p, pbody)
				-> `Tyenum pbody
			| _:
				std.fatal("internal error\n")
			;;
		| `std.None:
			if tag == tagstruct || tag == tagunion
				var pbody = std.mk(`std.None)
				ty = `Tystruct pbody
				if !declaretag(p, name, (tag, ty))
					std.fatal("internal error\n")
				;;
				parsestructbody(p, pbody, tag == tagunion)
				-> ty
			else
				var pbody = std.mk(`std.None)
				ty = `Tyenum pbody
				if !declaretag(p, name, (tag, ty))
					std.fatal("internal error\n")
				;;
				parseenumbody(p, pbody)
				-> ty
			;;
			
		;;
	| (`std.None, `Tobrace):
		if tag == tagstruct || tag == tagunion
			var pbody = std.mk(`std.None)
			parsestructbody(p, pbody, tag == tagunion)
			-> `Tystruct pbody
		else
			var pbody = std.mk(`std.None)
			parseenumbody(p, pbody)
			-> `Tyenum pbody
		;;
	| (`std.Some name, _):
		match lookuptag(p, name)
		| `std.None:
			if tag == tagstruct || tag == tagunion
				ty = `Tystruct std.mk(`std.None)
			else
				ty = `Tyenum std.mk(`std.None)
			;;
			if !declaretag(p, name, (tag, ty))
				std.fatal("internal error\n")
			;;
			-> ty
		| `std.Some (oldtag, oldty):
			if oldtag != tag
				err(tagloc, "struct/union/enum accessed with wrong tag type")
			;;
			-> oldty
		;;
	| (`std.None, _):
		err(tagloc, "struct/union/enum with no name and not body")
	;;
}

const parsestructbody = {p, pbody, isunion
	var sc, basety
	var namety
	var s
	
	s = std.mk([
		.isunion = isunion,
		.align = 1,
		.size = 0,
		.membs = [][:],
		.offsets = [][:],
		.exports = std.mkht(std.strhash, std.streq),
	])
	match next(p)
	| (l, `Tobrace):
	| (l, _):
		err(l, "expected '{'\n")
	;;
	while true
		match peek(p)
		| (_, `Tcbrace):
			break
		| _:
		;;
		(sc, basety) = parsedeclspecs(p);
		while true
			namety = parsedecl(p, basety);
			addtostruct(s, namety)
			match peek(p)
			| (_, `Tcomma):
				next(p)
			| _:
				break
			;;
		;;
		expectsemi(p);
	;;
	next(p)
	finalizestruct(s)
	pbody# = `std.Some s
}

const parseenumbody = {p, pbody
	var e, v
	
	e = std.mk([
		.membs=std.mkht(std.strhash, std.streq)
	])
	v = 0 castto(int64)
	match next(p)
	| (l, `Tobrace):
	| (l, _):
		err(l, "expected '{'\n")
	;;
	v = 0
	while true
		match peek(p)
		| (_, `Tcbrace):
			break
		| (l, `Tident name):
			next(p)
			if !declare(p, name, mkenumsym(p, name, `Tyenum pbody))
				err(l, "redefinition of {}", name)
			;;
			match peek(p)
			| (_, `Tasn):
				next(p)
				match parseconstexpr(p)
				| `Constint c:
					v = c
				| `Constptr _:
					err(l, "enum value cannot be derived from a pointer\n")
				;;
			| _:
			;;
			std.htput(e.membs, name, v)
			v += 1	
			match peek(p)
			| (_, `Tcomma):
				next(p)
			| _:
				break
			;;
		| (l, _):
			err(l, "expected ident or '}'")
		;;
	;;
	next(p)
	pbody# = `std.Some e
}


const parsedeclspecs = {p
	var sclass
	
	sclass = `Sclassnone
	while true
		match peek(p)
		| (l, `Ttypedef):
			next(p)
			sclass = `Sclasstypedef
		| (l, `Tident n):
			match lookuptype(p, n)
			| `std.Some ty:
				next(p)
				-> (sclass, ty)
			| `std.None:
				-> (sclass, `Tyint)
			;;
		| (l, `Tchar):
			next(p)
			-> (sclass, `Tychar)
		| (l, `Tint):
			next(p)
			-> (sclass, `Tyint)
		| (l, `Tlong):
			next(p)
			-> (sclass, `Tylong)
		| (l, `Tvoid):
			next(p)
			-> (sclass, `Tyvoid)
		| (l, `Tstruct):
			-> (sclass, parsetagtype(p))
		| (l, `Tunion):
			-> (sclass, parsetagtype(p))
		| (l, `Tenum):
			-> (sclass, parsetagtype(p))
		| (l, _):
			-> (sclass, `Tyint)
		;;
	;;
	std.fatal("unreachable\n")
}

const blobfinalize = {blob
	var cmp = {a, b
		var off1, off2
		(off1, _, _) = a
		(off2, _, _) = b
		-> std.numcmp(off1, off2)
	}
	var off1, off2, ty
	std.sort(blob.vals, cmp)
	for var i = 0; i < blob.vals.len - 1; i++
		(off1, ty, _) = blob.vals[i]
		(off2, _, _) = blob.vals[i+1]
		if off1 + std.get(typesize(ty)) > off2
			-> false
		;;
	;;
	-> true
}

const parsestructinit = {p, s
	var neednext, it, loc
	var membname, memboffset, membty
	var subinit
	var blob
	
	
	blob = [
		.vals = [][:]
	]
	(loc, _) = peek(p)
	expectobrace(p)
	it = mkstructiter(s)
	while true
		match peek(p)
		| (l, `Tcbrace):
			break
		| (l, `Tdot):
			neednext = false
			next(p)
			match next(p)
			| (nl, `Tident n):
				match getstructiter(s, n)
				| `std.None:
					err(nl, "struct has no member {}", n)
				| `std.Some newiter:
					it = newiter
				;;
			| (nl, _):
				err(nl, "expected ident")
			;;
			match next(p)
			| (_, `Tasn):
			| (nl, _):
				err(nl, "expected '='")
			;;
		| _:
			neednext = true
		;;
		
		if neednext
			if !structiternext(&it)
				err(loc, "too many struct initializers")
			;;
		;;
		
		(membname, memboffset, membty) = structiterwalk(it)
		subinit = parseinit(p, membty)
		
		match subinit
		| `Initexpr sube:
			match foldexpr(sube)
			| `std.None:
				err(loc, "not a constant value")
			| `std.Some c:
				std.slpush(&blob.vals, (memboffset, membty, c))
			;;
		| `Initblob subblob:
			for (o, t, c) in subblob.vals
				std.slpush(&blob.vals, (o+memboffset, t, c))
			;;
		;;
		
		match peek(p)
		| (_, `Tcomma):
			next(p)
		| _:
			break
		;;
		
	;;
	expectcbrace(p)
	if !blobfinalize(&blob)
		err(loc, "initializer has overlapping values\n")
	;;
	-> std.mk(blob)
}

const parseinit = {p, ty
	match ty
	| `Tystruct &(`std.None):
		std.fatal("internal error\n")
	| `Tystruct &(`std.Some s):
		-> `Initblob parsestructinit(p, s)
	| _:
		-> `Initexpr mkcast(ty, parseassign(p))
	;;
}

const parsedeclinit = {p, basety
	var name, ty
	(name, ty) = parsedecl(p, basety)
	
	match peek(p)
	| (l, `Tasn):
		next(p)
		-> (name, ty, `std.Some parseinit(p, ty))
	| _:
		-> (name, ty, `std.None)
	;;
	
}

const parsedecl = {p, basety
	match peek(p)
	| (_, `Tmul):
		next(p)
		-> parsedecl(p, `Typtr std.mk(basety))
	| _:
		-> parsedirectdecl(p, basety)
	;;
}

const parsedirectdecl = {p, basety
	match peek(p)
	| (_, `Tident name):
		next(p)
		-> (`std.Some name, parsedecltail(p, basety))
	| _:
		-> (`std.None, parsedecltail(p, basety))
	;;
}

const parsedecltail = {p, basety
	var arrlen
	var cfunc, paramty, sclass, name
	
	while true
		match peek(p)
		| (l, `Tosqbrac):
			next(p)
			match peek(p)
			| (_, `Tcsqbrac):
				err(l, "unimplemented inferred arr size")
			| _:
			;;
			match parseconstexpr(p)
			| `Constint v:
				arrlen = v castto(uint32)
			| `Constptr _:
				err(l, "array length cannot be derived from a pointer\n")
			;;
			expectcsqbrac(p)
			basety = `Tyarr std.mk([.len=arrlen, .subty=basety])
		| (l, `Toparen):
			next(p)
			cfunc.isvararg = false
			cfunc.params = [][:]
			cfunc.rty = basety
			match peek(p)
			| (_, `Tcparen):
				basety = `Tyfunc std.mk(cfunc)
				next(p)
				continue
			| _:
			;;
			while true
				(sclass, paramty) = parsedeclspecs(p)
				match sclass
				| `Sclassnone:
				| _:
					/* XXX error loc of param */
					err(l, "parameters cannot have a storage class\n")
				;;
				(name, paramty) = parsedecl(p, paramty)
				std.slpush(&cfunc.params, (name, paramty))
				match peek(p)
				| (_, `Tcomma):
					next(p);
				| _:
					break
				;;
				/* XXX ellipsis */
			;;
			expectcparen(p)
			basety = `Tyfunc std.mk(cfunc)
		| _:
			break
		;;
	;;
	-> basety
}

const parsedeclaration = {p
	var sclass, name, ty, sym
	var decls, loc, paramsym, init
	
	decls.syms = [][:]
	(sclass, ty) = parsedeclspecs(p)
	while true
		(loc, _) = peek(p)
		(name, ty, init) = parsedeclinit(p, ty)
		match name
		| `std.Some n:
			match sclass
			| `Sclassnone:
				if inglobalscope(p)
					sclass = `Sclassglobal
				else
					sclass = `Sclasslocal
				;;
			| _:
			;;
			match sclass
			| `Sclassnone:
				std.fatal("internal error\n")
			| `Sclassglobal:
				sym = mkglobal(p, n, ty)
				if !declare(p, n, sym)
					err(loc, "redefinition of {}\n", n)
				;;
			| `Sclasslocal:
				if inglobalscope(p)
					err(loc, "cannot declare a local outside of a function")
				;;
				sym = mklocal(p, n, ty)
				if !declare(p, n, sym)
					err(loc, "redefinition of {}\n", n)
				;;
			| `Sclasstypedef:
				sym = std.mk([.name=n, .ty=ty, .sc=`Sclasstypedef])
				if !declaretype(p, n, ty)
					err(loc, "redefinition of type {}\n", n)
				;;
			| _:
				std.fatal("unimplemented sclass\n")
			;;
			std.slpush(&decls.syms, (sym, init))
		| `std.None:
		;;
		match peek(p)
		| (_, `Tcomma):
			next(p)
		| (l, `Tobrace):
			match sclass
			| `Sclassglobal:
			| _:
				err(l, "function outside of global scope")
			;;
			if decls.syms.len != 1
				err(l, "unexpected {\n")
			;;
			match name
			| `std.Some n:
				p.lbltab=std.mkht(std.slhash, std.sleq)
				p.curfunc = std.mk([
					.name=n,
					.locals=[][:],
					.params=[][:],
					.lblcnt= 0,
				])
			| `std.None:
				err(l, "function requires a name\n")
			;;
			match ty
			| `Tyfunc fty:
				p.curfunc.functy = fty
			| _:
				err(loc, "non function type cannot have a function\n")
			;;
			pushscope(p)
			for (pname, pty) in p.curfunc.functy.params
				match pname
				| `std.Some n:
					paramsym = mklocal(p, n, pty)
					if !declare(p, n, paramsym)
						err(loc, "duplicate param name {}\n", n)
					;;
					std.slpush(&p.curfunc.params, paramsym)
				| `std.None:
				;;
			;;
			p.curfunc.body = parseblock(p)
			popscope(p)
			-> std.mk(`Nfunc p.curfunc)
		| _:
			break
		;;
	;;
	:done
	expectsemi(p)
	-> std.mk(`Ndecl decls)
}

const parsedeclorstmt = {p	
	if startofdecl(p)
		match parsedeclaration(p)
		| &(`Ndecl decls):
			-> std.mk(`Sdecl decls)
		| _:
			std.fatal("internal error\n")
		;;
	;;
	-> parsestmt(p)
}

const parsestmt = {p
	var expr
	
	match (peek(p), lookahead(p))
	| ((_, `Tident _), (_, `Tcolon)):
		-> parselabeled(p)
	| _:
	;;
	
	match peek(p)
	| (_, `Tsemi):
		next(p)
		-> std.mk(`Sempty)
	| (_, `Tif):
		-> parseif(p)
	| (_, `Tgoto):
		-> parsegoto(p)
	| (_, `Tfor):
		-> parsefor(p)
	| (_, `Twhile):
		-> parsewhile(p)
	| (_, `Tswitch):
		-> parseswitch(p)
	| (_, `Tcase):
		-> parsecase(p)
	| (_, `Tdefault):
		-> parsedefault(p)
	| (_, `Tdo):
		-> parsedowhile(p)
	| (l, `Treturn):
		-> parsereturn(p)
	| (l, `Tbreak):
		next(p)
		if p.breaks.len == 0
			err(l, "cannot break outside of a loop")
		;;
		-> std.mk(`Sgoto p.breaks[p.breaks.len - 1])
	| (l, `Tcontinue):
		next(p)
		if p.conts.len == 0
			err(l, "cannot continue outside of a loop")
		;;
		-> std.mk(`Sgoto p.conts[p.conts.len - 1])
	| (l, `Tobrace):
		-> std.mk(`Sblock parseblock(p))
	| _:
		expr = parseexpr(p)
		expectsemi(p)
		-> std.mk(`Sexpr expr)
	;;
}

const parseswitch = {p
	var sw
	
	match next(p)
	| (_, `Tswitch):
	| (l, _):
		err(l, "expected 'switch'\n")
	;;
	sw = [
		.cases=[][:],
		.breaklbl=nextlbl(p.curfunc),
		.defaultlbl=`std.None
	]
	expectoparen(p)
	sw.expr = parseexpr(p)
	expectcparen(p)
	std.slpush(&p.switchs, &sw)
	std.slpush(&p.breaks, sw.breaklbl)
	sw.stmt = parsestmt(p)
	std.slpop(&p.breaks)
	std.slpop(&p.switchs)
	-> std.mk(`Sswitch sw)
}

const parsecase = {p
	var loc, sw, lbl
	
	lbl = nextlbl(p.curfunc)
	match next(p)
	| (l, `Tcase):
		if p.switchs.len == 0
			err(l, "case outside of a switch")
		;;
		sw = p.switchs[p.switchs.len-1]
	| (l, _):
		err(l, "expected 'case'\n")
	;;
	
	(loc, _) = peek(p)
	match parseconstexpr(p)
	| `Constint v:
		for (caseval, _) in sw.cases
			if caseval == v
				err(loc, "duplicate case in switch")
			;;
		;;
		std.slpush(&sw.cases, (v, lbl))
	| `Constptr _:
		err(loc, "pointer derived constant cannot be used in case")
	;;
	expectcolon(p)
	-> std.mk(`Slabeled [.stmt=parsestmt(p), .lbl=lbl])
}

const parsedefault = {p
	var loc, sw, lbl
	
	lbl = nextlbl(p.curfunc)
	match next(p)
	| (l, `Tdefault):
		loc = l
		if p.switchs.len == 0
			err(l, "default outside of a switch")
		;;
		sw = p.switchs[p.switchs.len-1]
	| (l, _):
		err(l, "expected 'default'\n")
	;;
	match sw.defaultlbl
	| `std.None:
		sw.defaultlbl = `std.Some lbl
	| `std.Some _:
		err(loc, "switch has more than one default label")
	;;
	expectcolon(p)
	-> std.mk(`Slabeled [.stmt=parsestmt(p), .lbl=lbl])
}

const parsegoto = {p
	var loc, name, lbl
	
	(loc, _) = next(p)
	match next(p)
	| (_, `Tident n):
		name = n
	| (l, _):
		err(l, "expected 'identifier'\n")
	;;
	
	match std.htget(p.lbltab, name)
	| `std.None:
		lbl = nextlbl(p.curfunc)
		std.htput(p.lbltab, name, `Lblforward (loc, lbl))
	| `std.Some `Lblforward (_, l):
		lbl = l
	| `std.Some `Lbldefined l:
		lbl = l
	;;
	-> std.mk(`Sgoto lbl)
}

const parselabeled = {p
	var loc, name, lbl
	
	match next(p)
	| (l, `Tident n):
		loc = l
		name = n
	| (l, _):
		err(l, "expected 'identifier'\n")
	;;
	match next(p)
	| (_, `Tcolon):
	| (l, _):
		err(l, "expected ':'\n")
	;;
	lbl = nextlbl(p.curfunc)
	match std.htget(p.lbltab, name)
	| `std.None:
		lbl = nextlbl(p.curfunc)
	| `std.Some `Lblforward (_, l):
		lbl = l
	| `std.Some `Lbldefined _:
		err(loc, "label '{}' redefined\n", name)
	;;
	std.htput(p.lbltab, name, `Lbldefined lbl)
	-> std.mk(`Slabeled [.lbl=lbl, .stmt=parsestmt(p)])
}

const parsereturn= {p
		var rexpr
		
		next(p)
		rexpr = parseexpr(p)
		expectsemi(p)
		-> std.mk(`Sreturn mkcast(p.curfunc.functy.rty, rexpr))
}

const parseexpr = {p
	-> parseassign(p)
}

const mkrelop = {op, l, r
	l = usualconv(l)
	r = usualconv(r)
	(l, r) = arithconv(l, r)
	-> std.mk(`Erelop [.op=op, .l=l, .r=r])
}

const mkbinop = {op, l, r
	var ty
	
	match (op, exprtype(l), exprtype(r))
	| (`Oplus , `Typtr _, `Typtr _):
		std.fatal("XXX unhandled adding two pointers")
	| (`Ominus , `Typtr _, `Typtr _):
		-> std.mk(`Eptrdiff [.l=l, .r=r])
	| (`Oplus ,`Typtr _, _):
		-> std.mk(`Eptradd [.ptr=l, .amnt=r])
	| (`Oplus , _, `Typtr _):
		-> std.mk(`Eptradd [.ptr=r, .amnt=l])
	| _:
	;;	
	l = usualconv(l)
	r = usualconv(r)
	(l, r) = arithconv(l, r)
	ty = exprtype(l)
	-> std.mk(`Ebinop [.op=op, .ty=ty, .l=l, .r=r])
}

const mkcast = {ty, expr
	var ety
	
	ety = exprtype(expr)
	if sametype(ty, ety)
		-> expr
	;;
	if !compatibletypes(ty, ety)
		err(exprloc(expr), "invalid cast")
	;;
	-> std.mk(`Ecast [.ty=ty, .expr=expr])
}

const tyrank = {ty
	match ty
	| `Tylong:
		-> 3
	| `Tyenum _:
		-> 2
	| `Tyint:
		-> 2
	| `Tychar:
		-> 1
	| _:
		std.fatal("tyrank internal error\n")
	;;
}

const usualconv = {e
	match exprtype(e)
	| `Tyenum _:
	| `Tylong:
	| `Tyint:
	| `Tychar:
		-> mkcast(`Tyint, e)
	| _:
		std.fatal("unimplemented usualconv\n")
	;;
	-> e
}

const arithconv = {l, r
	var lrank, rrank
	var invert
	var result
	
	lrank = tyrank(exprtype(l))
	rrank = tyrank(exprtype(r))
	
	if rrank > lrank
		invert = true
		(l, r) = (r, l)
	else
		invert = false
	;;
	
	result = (l, r)
	match exprtype(l)
	| `Tylong:
		match exprtype(r)
		| `Tylong:
		| _:
			result = (l, mkcast(`Tylong, r))
		;;
	| `Tyenum _:
	| `Tyint:
	| _:
		std.fatal("unimplemented arithconv")
	;;
	
	if invert
		(r, l) = result
		result = (l, r)
	;;
	-> result
}

const parseconstexpr = {p
	var l
	
	(l, _) = peek(p)
	match foldexpr(parseexpr(p))
	| `std.Some c:
		-> c
	| `std.None:
		err(l, "expected a constant value")
	;;
}

const parseassign = {p
	var l, r, op
	
	l = parselogorexpr(p)
	match peek(p)
	| (_, `Tasn):
		op = `Oasn
	| (_, `Taddeq):
		op = `Oaddasn
	| (_, `Tsubeq):
		op = `Osubasn
	| _:
		-> l
	;;
	next(p)
	r = parseassign(p)
	-> std.mk(`Eassign [.ty=exprtype(l), .op=op, .l=l, .r=mkcast(exprtype(l), r)])
}

const parselogorexpr = {p
	var l, r
	
	l = parselogandexpr(p)
	while true
		match peek(p)
		| (_, `Tlor):
		| _:
			break
		;;
		next(p)
		r = parselogandexpr(p)
		l = std.mk(`Elogop [.op=`Olor, .l=l, .r=r])
	;;
	-> l
}

const parselogandexpr = {p
	var l, r
	
	l = parseorexpr(p)
	while true
		match peek(p)
		| (_, `Tland):
		| _:
			break
		;;
		next(p)
		r = parseorexpr(p)
		l = std.mk(`Elogop [.op=`Oland, .l=l, .r=r])
	;;
	-> l
}

const parseorexpr = {p
	var l, r
	
	l = parsexorexpr(p)
	while true
		match peek(p)
		| (_, `Tbor):
		| _:
			break
		;;
		next(p)
		r = parsexorexpr(p)
		l = mkbinop(`Oor, l, r)
	;;
	-> l
}

const parsexorexpr = {p
	var l, r
	
	l = parseandexpr(p)
	while true
		match peek(p)
		| (_, `Tbxor):
		| _:
			break
		;;
		next(p)
		r = parseandexpr(p)
		l = mkbinop(`Oxor, l, r)
	;;
	-> l
}

const parseandexpr = {p
	var l, r
	
	l = parseeqlexpr(p)
	while true
		match peek(p)
		| (_, `Tband):
		| _:
			break
		;;
		next(p)
		r = parseeqlexpr(p)
		l = mkbinop(`Oand, l, r)
	;;
	-> l
}

const parseeqlexpr = {p
	var l, r, op
	
	l = parserelexpr(p)
	while true
		match peek(p)
		| (_, `Teq):
			op = `Oeq
		| (_, `Tne):
			op = `One
		| _:
			break
		;;
		next(p)
		r = parserelexpr(p)
		l = mkrelop(op, l, r)
	;;
	-> l
}

const parserelexpr = {p
	var l, r, op
	
	l = parseaddexpr(p)
	while true
		match peek(p)
		| (_, `Tgt):
			op = `Ogt
		| (_, `Tlt):
			op = `Olt
		| (_, `Tge):
			op = `Oge
		| (_, `Tle):
			op = `Ole
		| _:
			break
		;;
		next(p)
		r = parseaddexpr(p)
		l = mkrelop(op, l, r)
	;;
	-> l
}

const parseaddexpr = {p
	var l, r, op
	
	l = parsemulexpr(p)
	while true
		match peek(p)
		| (_, `Tplus):
			op = `Oplus
		| (_, `Tminus):
			op = `Ominus
		| _:
			break
		;;
		next(p)
		r = parsemulexpr(p)
		l = mkbinop(op, l, r)
	;;
	-> l
}

const parsemulexpr = {p
	var l, r, op
	
	l = parsecastexpr(p)
	while true
		match peek(p)
		| (_, `Tmul):
			op = `Omul
		| (_, `Tdiv):
			op = `Odiv
		| (_, `Tmod):
			op = `Omod
		| _:
			break
		;;
		next(p)
		r = parsecastexpr(p)
		l = mkbinop(op, l, r)
	;;
	-> l
}

const parsecastexpr = {p
	var tok, ty, expr
	
	match peek(p)
	| (_, `Toparen):
		(_, tok) = lookahead(p)
		if !startoftype(p, tok)
			goto notcast
		;;
		expectoparen(p)
		ty = parsetypename(p)
		expectcparen(p)
		expr = parseunop(p)
		-> mkcast(ty, expr)
	;;
	:notcast
	-> parseunop(p)
}

const mkincdec = {l, op, expr
	if !islval(expr)
		err(l, "++ and -- expect an lval\n")
	;;
	// XXX check type...
	-> std.mk(`Eincdec [.op=op, .expr=expr])
}

const parseunop = {p
	var operand
	
	match peek(p)
	| (l, `Tinc):
		next(p)
		operand = parseunop(p)
		-> mkincdec(l, `Opreinc, operand)
	| (l, `Tdec):
		next(p)
		operand = parseunop(p)
		-> mkincdec(l, `Opredec, operand)
	| (l, `Tband):
		next(p)
		operand = parseunop(p)
		if !islval(operand)
			err(l, "can only take the address of an lvalue")
		;;
		-> std.mk(`Eunop [.op=`Oaddr, .ty=`Typtr std.mk(exprtype(operand)), .operand=operand])
	| (l, `Tminus):
		next(p)
		operand = parseunop(p)
		-> std.mk(`Eunop [.op=`Oneg, .ty=exprtype(operand), .operand=operand])
	| (l, `Tlnot):
		next(p)
		operand = parseunop(p)
		-> std.mk(`Eunop [.op=`Olnot, .ty=exprtype(operand), .operand=operand])
	| (l, `Tbnot):
		next(p)
		operand = parseunop(p)
		-> std.mk(`Eunop [.op=`Obnot, .ty=exprtype(operand), .operand=operand])
	| (l, `Tmul):
		next(p)
		operand = parseunop(p)
		match exprtype(operand)
		|`Typtr &(`Tyvoid):
			err(l, "dereference of a void*")
		|  `Typtr &(ty):
			-> std.mk(`Eunop [.ty=ty, .op=`Oderef, .operand=operand])
		| _:
			err(l, "can only dereference pointer types")
		;;
		
	| (l, `Tsizeof):
		-> parsesizeof(p)
	| _:
		-> parsepostexpr(p)
	;;
}


const parseseltail = {p, expr, selstruct
	var seloff, selty
	
	match next(p)
	| (selloc, `Tident name):
		match structmemb(selstruct, name)
		| `std.Some [.offset=off, .ty=ty]:
			seloff = off
			selty = ty
		| `std.None:
			err(selloc, "struct has no member {}\n", name)
		;;
	| (selloc, _):
		err(selloc, "expected 'identifier'")
	;;
	-> std.mk(`Esel [.ty=selty, .expr=expr, .off=seloff])
}

const parsepostexpr = {p
	var expr, idx
	var selstruct
	var funclike, args
	var functy, paramty
	
	expr = parseprimaryexpr(p)
	while true
		match peek(p)
		| (l, `Tinc):
			next(p)
			expr = mkincdec(l, `Opostinc, expr)
		| (l, `Tdec):
			next(p)
			expr = mkincdec(l, `Opostdec, expr)
		| (l, `Tosqbrac):
			next(p)
			idx = parseexpr(p)
			expectcsqbrac(p)
			expr = std.mk(`Eidx [.ty=`Tyint, .expr=expr, .idx=idx])
		| (l, `Tdot):
			next(p)
			match exprtype(expr)
			|  `Tystruct &(`std.Some s):
				selstruct = s
			| _:
				err(l, "'.' can only be used on complete structs or unions\n")
			;;
			expr = parseseltail(p, expr, selstruct)
		| (l, `Tarrow):
			next(p)
			match exprtype(expr)
			| `Typtr &(`Tystruct &(`std.Some s)):
				selstruct = s
			| _:
				err(l, "'->' can only be used on struct or union pointers\n")
			;;
			expr = parseseltail(p, expr, selstruct)
		| (l, `Toparen):
			next(p)
			funclike = expr
			match exprtype(funclike)
			| `Tyfunc fty:
				functy = fty
			| _:
				err(l, "call of non function")
			;;
			args = [][:]
			match peek(p)
			| (_, `Tcparen):
				next(p)
			| _:
				while true
					(_, paramty) = functy.params[args.len]
					expr = mkcast(paramty, parseexpr(p))
					std.slpush(&args, expr)
					match peek(p)
					| (_, `Tcparen):
						next(p)
						break
					| (_, `Tcomma):
						next(p)
					;;
				;;
			;;
			expr = std.mk(`Ecall [
				.functy=functy,
				.func=funclike,
				.args=args
			])
		| _:
			break
		;;
	;;
	-> expr
}

const parsetypename = {p
	var sc, name, ty
	(sc, ty) = parsedeclspecs(p);
	(name, ty) = parsedecl(p, ty);
	/* XXX: disallow sclass or name? */
	-> ty;
}

const parsesizeof = {p
	var loc, ty, tok
	
	// XXX: This may be incorrect.
	// needs more edge test cases.
	(loc, _) = next(p)
	match peek(p)
	| (l, `Toparen):
		expectoparen(p)
		(_, tok) = peek(p)
		if startoftype(p, tok)
			ty = parsetypename(p)
		else
			ty = exprtype(parseunop(p))
		;;
		expectcparen(p)
	| _:
		(_, tok) = peek(p)
		if startoftype(p, tok)
			ty = parsetypename(p)
		else
			ty = exprtype(parseunop(p))
		;;
	;;
	match typesize(ty)
	| `std.None:
		err(loc, "cannot do sizeof on incomplete type\n")
	| `std.Some sz:
		-> std.mk(`Esizeof (sz castto(int)))
	;;
}

const parseprimaryexpr = {p
	var expr
	
	match next(p)
	| (l, `Tident n):
		match lookup(p, n)
		| `std.Some sym:
			-> std.mk(`Eident sym)
		| `std.None:
			err(l, "undefined symbol {}\n", n)
		;;
	| (l, `Tintlit v):
		-> std.mk(`Eintlit v)
	| (l, `Tstrlit s):
		-> std.mk(`Estrlit s)
	| (_, `Toparen):
		expr = parseexpr(p)
		expectcparen(p)
		-> expr
	| (l, t):
		err(l, "expected expression, got {}\n", t)
	;;	
}

