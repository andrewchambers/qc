use std
use "tok"
use "err"
use "ctypes"
use "ast"

pkg qc =
	const parse : (ts : tokstream# -> node#[:])
;;

const mklocal = {p, name, ty
	var l
	
	l = std.mk([.ty=ty, .name=name, .sc=`Sclasslocal])
	std.slpush(&p.curfunc.locals, l)
	-> l
}

const mkglobal = {p, name, ty
	var g
	
	g = std.mk([.ty=ty, .name=name, .sc=`Sclassglobal])
	-> g
}

type lblstate = union
	`Lblforward (srcloc, int)
	`Lbldefined int
;;

type parser = struct
	ts : tokstream#
	toks : (srcloc, tok)[2]
	symtab : std.htab(byte[:], sym#)#[:]
	tagtab : std.htab(byte[:], caggr#)#[:]
	lbltab : std.htab(byte[:], lblstate)#
	curfunc : func#
;;

const inglobalscope = {p
	-> p.symtab.len == 1
}

const pushscope = {p
	std.slpush(&p.symtab, std.mkht(std.strhash, std.streq))
	std.slpush(&p.tagtab, std.mkht(std.strhash, std.streq))
}

const popscope = {p
	var symtab, tagtab
	
	(symtab, p.symtab) = std.slpop(p.symtab)
	(tagtab, p.tagtab) = std.slpop(p.tagtab)
	std.htfree(symtab)
	std.htfree(tagtab)
}

const declaretag = {p, name, tag
	if std.hthas(p.tagtab[p.tagtab.len-1], name)
		-> false
	;;
	std.htput(p.tagtab[p.tagtab.len-1], name, tag)
	-> true
}

const lookuptag = {p, name
	for var i = p.tagtab.len-1; i >= 0 ; i--
		match std.htget(p.tagtab[i], name)
		| `std.Some tag:
			-> `std.Some tag
		| `std.None:
		;;
	;;
	-> `std.None
}

const declare = {p, name, sym
	if std.hthas(p.symtab[p.symtab.len-1], name)
		-> false
	;;
	std.htput(p.symtab[p.symtab.len-1], name, sym)
	-> true
}

const lookup = {p, name
	for var i = p.symtab.len-1; i >= 0 ; i--
		match std.htget(p.symtab[i], name)
		| `std.Some sym:
			-> `std.Some sym
		| `std.None:
		;;
	;;
	-> `std.None
}

const parse = {ts
	var p : parser#
	var symtab, tagtab, globals
	
	symtab = [][:]
	tagtab = [][:]
	
	p = std.mk([
		.ts = ts,
		.symtab = symtab,
		.tagtab = tagtab,
	])
	pushscope(p)
	p.toks[0] = toknext(ts)
	p.toks[1] = toknext(ts)
	
	globals = [][:]
	while true
		match peek(p)
		| (_, `Teof):
			break
		| _:
			std.slpush(&globals, parsedeclaration(p))
		;;
	;;
	-> globals
}

const next = {p
	var t = p.toks[0]
	p.toks[0] = p.toks[1]
	p.toks[1] = toknext(p.ts)
	-> t
}

const peek = {p
	-> p.toks[0]
}

const lookahead = {p
	-> p.toks[1]
}

const parsetype = {p
	match next(p)
	| (_, `Tint):
		-> `Typrim `Tyint
	| (l, _):
		err(l, "expected type\n")
	;;
}

const expectoparen = {p
	match next(p)
	| (_, `Toparen):
	| (l, _):
		err(l, "expected '('\n")
	;;
}

const expectcparen = {p
	match next(p)
	| (_, `Tcparen):
	| (l, _):
		err(l, "expected ')'\n")
	;;
}

const expectcsqbrac = {p
	match next(p)
	| (_, `Tcsqbrac):
	| (l, _):
		err(l, "expected ']'\n")
	;;
}

const parseif = {p
	var cond, iftrue, iffalse
	
	next(p)
	expectoparen(p)
	cond = parseexpr(p)
	expectcparen(p)
	iftrue = parsestmt(p)
	match peek(p)
	| (_, `Telse):
		next(p)
		iffalse = `std.Some parsestmt(p)
	| _:
		iffalse = `std.None
	;;
	-> std.mk(`Sif [
		.cond=cond,
		.iftrue=iftrue,
		.iffalse=iffalse,
		.truelbl=nextlbl(p.curfunc),
		.falselbl=nextlbl(p.curfunc),
		.donelbl=nextlbl(p.curfunc),
	])
}

const parsewhile = {p
	var cond, stmt
	
	next(p)
	expectoparen(p)
	cond = parseexpr(p)
	expectcparen(p)
	stmt = parsestmt(p)
	
	-> std.mk(`Swhile [
		.cond=cond,
		.stmt=stmt,
		.contlbl=nextlbl(p.curfunc),
		.stmtlbl=nextlbl(p.curfunc),
		.breaklbl=nextlbl(p.curfunc),
	])
}

const parsedowhile = {p
	var cond, stmt
	
	next(p)
	stmt = parsestmt(p)
	match next(p)
	| (_, `Twhile):
	| (l, _):
		err(l, "expected 'while'\n")
	;;
	expectoparen(p)
	cond = parseexpr(p)
	expectcparen(p)
	expectsemi(p)
	
	-> std.mk(`Sdowhile [
		.cond=cond,
		.stmt=stmt,
		.contlbl=nextlbl(p.curfunc),
		.stmtlbl=nextlbl(p.curfunc),
		.breaklbl=nextlbl(p.curfunc),
	])
}

const parsefor = {p
	var forstmt
	
	next(p)
	expectoparen(p)
	match peek(p)
	| (_, `Tsemi):
		forstmt.init = `std.None
		next(p)
	| _:
		forstmt.init = `std.Some parseexpr(p)
		expectsemi(p)
	;;
	match peek(p)
	| (_, `Tsemi):
		forstmt.cond = `std.None
		next(p)
	| _:
		forstmt.cond = `std.Some parseexpr(p)
		expectsemi(p)
	;;
	match peek(p)
	| (_, `Tcparen):
		forstmt.step = `std.None
		next(p)
	| _:
		forstmt.step = `std.Some parseexpr(p)
		expectcparen(p)
	;;
	forstmt.stmt = parsestmt(p)
	forstmt.contlbl=nextlbl(p.curfunc)
	forstmt.stmtlbl=nextlbl(p.curfunc)
	forstmt.breaklbl=nextlbl(p.curfunc)
	-> std.mk(`Sfor forstmt)
}

const parseblock = {p
	var stmts
	
	stmts = [][:]
	match next(p)
	| (l, `Tobrace):
	| (l, t):
		err(l, "expected '{{', got {}\n", t)
	;;
	pushscope(p)
	while true
		match peek(p)
		| (_, `Tcbrace):
			next(p)
			break
		| _:
			std.slpush(&stmts, parsedeclorstmt(p))
		;;
	;;
	popscope(p)
	-> stmts
}

const expectsemi = {p
	match next(p)
	| (l, `Tsemi):
	| (l, t):
		err(l, "expected ';', got {}", t)
	;;
}

const startofdecl = {p
	match peek(p)
	| (_, `Tstruct):
	| (_, `Tint):
	| (_, `Tvoid):
	| (_, `Tident n):
		/* XXX lookup type */
		-> false
	| _:
		-> false
	;;
	-> true
}

const parsetagtype = {p
	var structloc
	var tagname, body
	
	match next(p)
	| (l, `Tstruct):
		structloc = l
	| (l, _):
		err(l, "expected 'struct'\n")
	;;
	match peek(p)
	| (_, `Tident tname):
		next(p)
		tagname = `std.Some tname
		match lookuptag(p, tname)
		| `std.Some tagty:
			body = tagty
		| `std.None:
			body = std.mk(`Tystruct `std.None)
			declaretag(p, tname, body)
		;;
	| (l, _):
		tagname = `std.None
		body = std.mk(`Tystruct `std.None)
	;;
	match peek(p)
	| (l, `Tobrace):
		match (tagname, body)
		| (`std.Some _, &(`Tystruct `std.Some _)):
			err(l, "redfinition of struct\n")
		| _:
			body# = parsestructbody(p)
		;;
	| (l, _):
	;;
	match (tagname, body)
	| (`std.None, &(`Tystruct `std.None)):
		err(structloc, "struct without a tag requires a body\n")
	| _:
	;;
	-> `Tyaggr body
}

const parsestructbody = {p
	var sc, basety
	var namety, membs 
	
	membs = [][:]
	match next(p)
	| (l, `Tobrace):
	| (l, _):
		err(l, "expected '{'\n")
	;;
	while true
		match peek(p)
		| (_, `Tcbrace):
			break
		| _:
		;;
		(sc, basety) = parsedeclspecs(p);
		while true
			namety = parsedecl(p, basety);
			std.slpush(&membs, namety)
			match peek(p)
			| (_, `Tcomma):
				next(p)
			| _:
				break
			;;
		;;
		expectsemi(p);
	;;
	next(p)
	-> `Tystruct `std.Some[.membs=membs]
}

const parsedeclspecs = {p
	var sclass
	
	sclass = `Sclassnone
	while true
		match peek(p)
		| (l, `Tint):
			next(p)
			-> (sclass, `Typrim `Tyint)
		| (l, `Tstruct):
			-> (sclass, parsetagtype(p))
		| (l, _):
			err(l, "expected a type specifier or storage class\n")
		;;
	;;
	std.fatal("unreachable\n")
}

const parsedecl = {p, basety
	match peek(p)
	| (_, `Tmul):
		next(p)
		-> parsedecl(p, `Tyaggr std.mk(`Typtr basety))
	| _:
		-> parsedirectdecl(p, basety)
	;;
}

const parsedirectdecl = {p, basety
	match peek(p)
	| (_, `Tident name):
		next(p)
		-> (`std.Some name, parsedecltail(p, basety))
	| _:
		-> (`std.None, parsedecltail(p, basety))
	;;
}

const parsedecltail = {p, basety
	var arrlen
	var cfunc, paramty, sclass, name
	
	while true
		match peek(p)
		| (l, `Tosqbrac):
			next(p)
			match peek(p)
			| (_, `Tcsqbrac):
				err(l, "unimplemented inferred arr size")
			| _:
			;;
			arrlen = parseconstexpr(p) castto(uint32)
			expectcsqbrac(p)
			basety = `Tyaggr std.mk(`Tyarr [.len=arrlen, .subty=basety])
		| (l, `Toparen):
			next(p)
			cfunc.isvararg = false
			cfunc.params = [][:]
			cfunc.rty = basety
			match peek(p)
			| (_, `Tcparen):
				basety = `Tyaggr std.mk(`Tyfunc cfunc)
				next(p)
				continue
			| _:
			;;
			while true
				(sclass, paramty) = parsedeclspecs(p);
				(name, paramty) = parsedecl(p, paramty);
				std.slpush(&cfunc.params, (name, paramty))
				match peek(p)
				| (_, `Tcomma):
					next(p);
				| _:
					break
				;;
				/* XXX ellipsis */
			;;
			basety = `Tyaggr std.mk(`Tyfunc cfunc)
		| _:
			break
		;;
	;;
	-> basety
}

const parsedeclaration = {p
	var sclass, name, ty, sym
	var decls, loc
	
	decls = [][:]
	(sclass, ty) = parsedeclspecs(p)
	while true
		(loc, _) = peek(p)
		(name, ty) = parsedecl(p, ty)
		match name
		| `std.Some n:
			match sclass
			| `Sclassnone:
				if inglobalscope(p)
					sclass = `Sclassglobal
				else
					sclass = `Sclasslocal
				;;
			| _:
			;;
			match sclass
			| `Sclassnone:
				std.fatal("internal error\n")
			| `Sclassglobal:
				sym = mkglobal(p, n, ty)
				if !declare(p, n, sym)
					err(loc, "redefinition of {}\n", n)
				;;
			| `Sclasslocal:
				if inglobalscope(p)
					err(loc, "cannot declare a local outside of a function")
				;;
				sym = mklocal(p, n, ty)
				if !declare(p, n, sym)
					err(loc, "redefinition of {}\n", n)
				;;
			| `Sclasstypedef:
				std.fatal("unimplemented typedef\n")
			| _:
				std.fatal("unimplemented sclass\n")
			;;
			
			std.slpush(&decls, (sym, `std.None))
		| `std.None:
			err(loc, "declaration defines no name\n")
		;;
		match peek(p)
		| (_, `Tcomma):
			next(p)
		| (l, `Tobrace):
			match sclass
			| `Sclassglobal:
			| _:
				err(loc, "function definition must be global\n")
			;;
			if decls.len != 1
				err(l, "unexpected {\n")
			;;
			match name
			| `std.Some n:
				p.curfunc = std.mk([
					.name=n,
					.ty=ty,
					.locals=[][:],
					.lblcnt= 0,
				])
			| `std.None:
				err(l, "function requires a name\n")
			;;
			p.curfunc.body = parseblock(p)
			-> std.mk(`Nfunc p.curfunc)
		| _:
			break
		;;
	;;
	expectsemi(p)
	-> std.mk(`Ndecl decls)
}

const parsedeclorstmt = {p	
	if startofdecl(p)
		match parsedeclaration(p)
		| &(`Ndecl decls):
			-> std.mk(`Sdecl decls)
		| _:
			std.fatal("internal error\n")
		;;
	;;
	-> parsestmt(p)
}

const parsestmt = {p
	var expr
	
	match (peek(p), lookahead(p))
	| ((_, `Tident _), (_, `Tcolon)):
		-> parselabeled(p)
	| _:
	;;
	
	match peek(p)
	| (_, `Tsemi):
		next(p)
		-> std.mk(`Sempty)
	| (_, `Tif):
		-> parseif(p)
	| (_, `Tgoto):
		-> parsegoto(p)
	| (_, `Tfor):
		-> parsefor(p)
	| (_, `Twhile):
		-> parsewhile(p)
	| (_, `Tdo):
		-> parsedowhile(p)
	| (l, `Treturn):
		-> parsereturn(p)
	| (l, `Tobrace):
		-> std.mk(`Sblock parseblock(p))
	| _:
		expr = parseexpr(p)
		expectsemi(p)
		-> std.mk(`Sexpr expr)
	;;
}


const parsegoto = {p
	var loc, name, lbl
	
	(loc, _) = next(p)
	match next(p)
	| (_, `Tident n):
		name = n
	| (l, _):
		err(l, "expected 'identifier'\n")
	;;
	
	match std.htget(p.lbltab, name)
	| `std.None:
		lbl = nextlbl(p.curfunc)
		std.htput(p.lbltab, name, `Lblforward (loc, lbl))
	| `std.Some `Lblforward (_, l):
		lbl = l
	| `std.Some `Lbldefined l:
		lbl = l
	;;
	-> std.mk(`Sgoto lbl)
}

const parselabeled = {p
	var loc, name, lbl
	
	match next(p)
	| (l, `Tident n):
		loc = l
		name = n
	| (l, _):
		err(l, "expected 'identifier'\n")
	;;
	match next(p)
	| (_, `Tcolon):
	| (l, _):
		err(l, "expected ':'\n")
	;;
	lbl = nextlbl(p.curfunc)
	match std.htget(p.lbltab, name)
	| `std.None:
		lbl = nextlbl(p.curfunc)
	| `std.Some `Lblforward (_, l):
		lbl = l
	| `std.Some `Lbldefined _:
		err(loc, "label '{}' redefined\n", name)
	;;
	std.htput(p.lbltab, name, `Lbldefined lbl)
	-> std.mk(`Slabeled [.lbl=lbl, .stmt=parsestmt(p)])
}

const parsereturn= {p
		var rexpr
		
		next(p)
		rexpr = parseexpr(p)
		expectsemi(p)
		-> std.mk(`Sreturn rexpr)
}

const parseexpr = {p
	-> parseassign(p)
}

const parseconstexpr = {p
	match next(p)
	| (_, `Tintlit n):
		-> n
	| (l, _):
		err(l, "expected a constant expression\n")
	;;
}

const parseassign = {p
	var l, r
	
	l = parseeqlexpr(p)
	match peek(p)
	| (_, `Tasn):
	| _:
		-> l
	;;
	next(p)
	r = parseassign(p)
	-> std.mk(`Eassign [.ty=`Typrim `Tyint, .op=`Oasn, .l=l, .r=r])
}

const parseeqlexpr = {p
	var l, r, op
	
	l = parserelexpr(p)
	while true
		match peek(p)
		| (_, `Teq):
			op = `Oeq
		| (_, `Tne):
			op = `One
		| _:
			break
		;;
		next(p)
		r = parserelexpr(p)
		l = std.mk(`Ebinop [.ty=`Typrim `Tyint, .op=op, .l=l, .r=r])
	;;
	-> l
}


const parserelexpr = {p
	var l, r, op
	
	l = parseaddexpr(p)
	while true
		match peek(p)
		| (_, `Tgt):
			op = `Ogt
		| (_, `Tlt):
			op = `Olt
		| (_, `Tge):
			op = `Oge
		| (_, `Tle):
			op = `Ole
		| _:
			break
		;;
		next(p)
		r = parseaddexpr(p)
		l = std.mk(`Ebinop [.ty=`Typrim `Tyint, .op=op, .l=l, .r=r])
	;;
	-> l
}

const parseaddexpr = {p
	var l, r, op
	
	l = parsemulexpr(p)
	while true
		match peek(p)
		| (_, `Tplus):
			op = `Oplus
		| (_, `Tminus):
			op = `Ominus
		| _:
			break
		;;
		next(p)
		r = parsemulexpr(p)
		l = std.mk(`Ebinop [.ty=`Typrim `Tyint, .op=op, .l=l, .r=r])
	;;
	-> l
}

const parsemulexpr = {p
	var l, r, op
	
	l = parseunop(p)
	while true
		match peek(p)
		| (_, `Tmul):
			op = `Omul
		| (_, `Tdiv):
			op = `Odiv
		| (_, `Tmod):
			op = `Omod
		| _:
			break
		;;
		next(p)
		r = parseunop(p)
		l = std.mk(`Ebinop [.ty=`Typrim `Tyint, .op=op, .l=l, .r=r])
	;;
	-> l
}

const parseunop = {p
	var operand
	
	match peek(p)
	| (l, `Tband):
		next(p)
		operand = parseunop(p)
		-> std.mk(`Eunop [.ty=`Typrim `Tyint, .op=`Oaddr, .operand=operand])
	| (l, `Tmul):
		next(p)
		operand = parseunop(p)
		-> std.mk(`Eunop [.ty=`Typrim `Tyint, .op=`Oderef, .operand=operand])
	| _:
		-> parsepostexpr(p)
	;;
}


const parseseltail = {p, expr, selstruct
	var seloff, selty
	
	match next(p)
	| (selloc, `Tident name):
		match structmemb(selstruct, name)
		| `std.Some (ty, off):
			seloff = off
			selty = ty
		| `std.None:
			err(selloc, "struct has no member {}\n", name)
		;;
	| (selloc, _):
		err(selloc, "expected 'identifier'")
	;;
	-> std.mk(`Esel [.ty=selty, .expr=expr, .off=seloff])
}

const parsepostexpr = {p
	var expr, idx
	var selstruct
	var funclike, args
	
	expr = parseprimaryexpr(p)
	while true
		match peek(p)
		| (l, `Tosqbrac):
			next(p)
			idx = parseexpr(p)
			expectcsqbrac(p)
			expr = std.mk(`Eidx [.ty=`Typrim `Tyint, .expr=expr, .idx=idx])
		| (l, `Tdot):
			next(p)
			match exprtype(expr)
			| `Tyaggr &(`Tystruct `std.Some s):
				selstruct = s
			| _:
				err(l, "'.' can only be used on complete structs or unions\n")
			;;
			expr = parseseltail(p, expr, selstruct)
		| (l, `Tarrow):
			next(p)
			match exprtype(expr)
			| `Tyaggr &(`Typtr `Tyaggr &(`Tystruct `std.Some s)):
				selstruct = s
			| _:
				err(l, "'->' can only be used on structs or unions\n")
			;;
			expr = parseseltail(p, expr, selstruct)
		| (l, `Toparen):
			funclike = expr
			args = [][:]
			match peek(p)
			| (_, `Tcparen):
				next(p)
			| _:
				while true
					std.slpush(&args, parseexpr(p))
					match peek(p)
					| (_, `Tcparen):
						next(p)
						break
					| (_, `Tcomma):
						next(p)
					;;
				;;
			;;
			expr = std.mk(`Ecall [
				.ty=`Typrim `Tyint,
				.func=funclike,
				.args=args
			])
		| _:
			break
		;;
	;;
	-> expr
}

const parseprimaryexpr = {p
	var expr
	
	match next(p)
	| (l, `Tident n):
		match lookup(p, n)
		| `std.Some sym:
			-> std.mk(`Eident sym)
		| `std.None:
			err(l, "undefined symbol {}\n", n)
		;;
	| (l, `Tintlit v):
		-> std.mk(`Eintlit v)
	| (_, `Toparen):
		expr = parseexpr(p)
		expectcparen(p)
		-> expr
	| (l, t):
		err(l, "expected 'integer literal', got {}\n", t)
	;;	
}

