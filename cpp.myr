use std
use "err"
use "tok"
use "hideset"

pkg qc =
	type pp = struct
		input : tokstream#[:]
		incpath : byte[:]
		sysincpaths : byte[:][:]
		expanded : tok[:]
		condstack : condstate[:]
		macros : std.htab(byte[:], macro)#
	;;
	
	type condstate = struct
		wastrue : bool
		afterelse : bool
	;;
	
	type objmacro = struct
		toks : tok[:]
	;;
	
	type funcmacro = struct
		params : byte[:][:]
		toks : tok[:]
	;;
	
	type macro = union
		`Mobj objmacro#
		`Mfunc funcmacro#
	;;
	
	const mkcpp : (ts : tokstream#, incpath : byte[:] ,sysincpaths : byte[:][:] -> pp#) 
	const cppnext : (pp : pp# -> tok)
;;

const mkcpp = {ts, incpath, sysincpaths
	var pp
	
	pp = std.mk([
		.input=[][:],
		.incpath=incpath,
		.sysincpaths=sysincpaths,
		.expanded=[][:],
		.condstack=[][:],
		.macros=std.mkht(std.strhash, std.streq)
	])
	pushts(pp, ts)
	-> pp
}

const cppnextnoexp = {pp
	var tok
	
	if pp.expanded.len != 0
		tok = std.slpop(&pp.expanded)
	else
		tok = toknext(pp.input[pp.input.len-1])
	;;
	
	match tok.kind
	| `Teof:
		if pp.input.len > 1
			std.slpop(&pp.input)
			-> cppnextnoexp(pp)
		;;
	| _:
	;;
	
	-> tok
}

const peeknoexp = {pp
	var tok
	
	tok = cppnextnoexp(pp)
	std.slpush(&pp.expanded, tok)
	
	-> tok
}

const cppnext = {pp
	var mtok, tok, expanded
	
	mtok = cppnextnoexp(pp)
	
	match std.htget(pp.macros, mtok.text)
	| `std.Some `Mobj m:
		expanded = subst(m.toks, [][:], [][:], mtok.hs)
		for var i = expanded.len - 1; i >= 0 ; i--
			std.slpush(&pp.expanded, expanded[i])
		;;
		-> cppnext(pp)
	| `std.Some `Mfunc m:
		tok = cppnextnoexp(pp)
		match tok.kind
		| `Toparen:
			var args = [][:]
			tok = cppnextnoexp(pp)
			match tok.kind
			| `Tcparen:
				goto gotargs
			| _:
				std.slpush(&args, [][:])
			;;
			var lvl = 1
			while true
				match tok.kind
				| `Tcomma:
					if lvl == 1
						std.slpush(&args, [][:])
						tok = cppnextnoexp(pp)
						continue
					;;
				| `Toparen:
					lvl += 1
				| `Tcparen:
					lvl -= 1
				| _:
				;;
				if lvl == 0
					break
				;;
				std.slpush(&args[args.len-1], tok)
				tok = cppnextnoexp(pp)
			;;
			:gotargs
			if m.params.len != args.len
				err(mtok.loc, "incorrect number of macro arguments\n")
			;;
			expanded = subst(m.toks, m.params, args, hsintersect(mtok.hs, tok.hs))
			for var i = expanded.len - 1; i >= 0 ; i--
				std.slpush(&pp.expanded, expanded[i])
			;;
			-> cppnext(pp)
		| _:
			std.slpush(&expanded, tok)
		;;
	| `std.None:
	;;
	
	match mtok.kind
	| `Tdirective:
		directive(pp)
		-> cppnext(pp)
	| _:
	;;
	-> mtok
}

const subst = {toks, names : byte[:][:], args : tok[:][:], hs
	var r
	
	r = [][:]
	
	for var i = 0; i < toks.len; i++
		match std.lsearch(names, toks[i].text, std.strcmp)
		| `std.Some idx:
			for var j = 0; j < args[idx].len; j++
				std.slpush(&r, args[idx][j])
			;;
		| `std.None:
			std.slpush(&r, toks[i])
		;;
	;;
	
	for var i = 0; i < r.len; i++
		r[i].hs = hsunion(r[i].hs, hs)
	;; 
	
	-> r
}

const pushts = {pp, ts
	std.slpush(&pp.input, ts)
}

const directive = {pp
	var tok
	
	tok = cppnext(pp)
	match tok.text
	| "include":
		dirinclude(pp)
	| "define":
		dirdefine(pp)
	| "ifdef":
		dirifdef(pp, false)
	| "ifndef":
		dirifdef(pp, true)
	| "if":
		dirif(pp)
	| "elif":
		direlif(pp)
	| "endif":
		direndif(pp)
	| "else":
		direlse(pp)
	| dir:
		err(tok.loc, "bad directive {}\n", dir)
	;;
}

const dirif = {pp
	var expr, tok
	
	expr = cppnextnoexp(pp)
	tok = cppnextnoexp(pp)
	match tok.kind
	| `Tenddirective:
	| _:
		err(tok.loc, "expected end of directive\n")
	;;
	
	std.slpush(&pp.condstack, [.wastrue=false, .afterelse=false])
	
	match expr.kind
	| `Tintlit 1:
		pp.condstack[pp.condstack.len-1].wastrue = true
	| _:
		skipcond(pp)
	;;
}

const dirifdef = {pp, invert
	var name, tok, cond
	
	tok = cppnextnoexp(pp)
	name = tok.text
	tok = cppnextnoexp(pp)
	match tok.kind
	| `Tenddirective:
	| _:
		err(tok.loc, "expected end of directive\n")
	;;
	
	std.slpush(&pp.condstack, [.wastrue=false, .afterelse=false])
	cond = std.hthas(pp.macros, name)
	if invert
		cond = !cond
	;;
	if cond
		pp.condstack[pp.condstack.len-1].wastrue = true
	else
		skipcond(pp)
	;;
}

const direlif = {pp
	var expr, tok
	
	expr = cppnextnoexp(pp)
	tok = cppnextnoexp(pp)
	match tok.kind
	| `Tenddirective:
	| _:
		err(tok.loc, "expected end of directive\n")
	;;
	
	if pp.condstack.len == 0 || pp.condstack[pp.condstack.len-1].afterelse
		err(tok.loc, "unexpected #elif\n")
	;;
	
	if pp.condstack[pp.condstack.len-1].wastrue
		skipcond(pp)
		-> void
	;;	
	
	match expr.kind
	| `Tintlit 1:
		pp.condstack[pp.condstack.len-1].wastrue = true
	| _:
		skipcond(pp)
	;;
}

const direlse = {pp
	var tok
	
	tok = cppnextnoexp(pp)
	match tok.kind
	| `Tenddirective:
	| _: err(tok.loc, "junk at end of else directive\n")
	;;
	if pp.condstack.len == 0 || pp.condstack[pp.condstack.len-1].afterelse
		 err(tok.loc, "unexpected #else\n")
	;;
	pp.condstack[pp.condstack.len-1].afterelse = true
	if pp.condstack[pp.condstack.len-1].wastrue
		skipcond(pp)
	;;
}

const direndif = {pp
	var tok
	
	tok = cppnextnoexp(pp)
	match tok.kind
	| `Tenddirective:
	| _: err(tok.loc, "junk at end of endif directive\n")
	;;
	if pp.condstack.len == 0
		err(tok.loc, "unexpected #endif\n")
	;;
	std.slpop(&pp.condstack)
}

const skipcond = {pp
	var tok1, tok2
	
	var depth = 1
	while true 
		tok1 = cppnextnoexp(pp)
		match tok1.kind
		| `Tdirective:
		| `Teof:
			err(tok1.loc, "got eof, expected #endif\n")
		| _:
			continue
		;;
		tok2 = cppnextnoexp(pp)
		match tok2.text
		| "if":
			depth += 1
		| "ifdef":
			depth += 1
		| "ifndef":
			depth += 1
		| "else":
			if depth == 1
				break
			;;
		| "elif":
			if depth == 1
				break
			;;
		| "endif":
			depth -= 1
			if depth == 0
				break
			;;
		| _:
		;;
	;;
	std.slpush(&pp.expanded, tok2)
	std.slpush(&pp.expanded, tok1)
}

const findsysinc = {pp, header
	for ipath in pp.sysincpaths
		var fullpath = std.pathjoin([ipath, header][:])
		if std.fexists(fullpath)
			-> `std.Some fullpath
		;;
		std.slfree(fullpath)
	;;
	-> `std.None
}

const findinc = {pp, header
	var incpath 
	
	incpath = std.pathjoin([pp.incpath, header][:])
	if std.fexists(incpath)
		-> `std.Some incpath
	;;
	std.slfree(incpath)
	-> findsysinc(pp, header)
}

const dirinclude = {pp
	var tok, path, ts
	
	tok = cppnextnoexp(pp)
	match tok.kind
	| `Tsysincl s:
		match findsysinc(pp, s)
		| `std.Some found:
			path = found
		| `std.None:
			err(tok.loc, "{} not in include path\n", s)
		;;
	| `Tstrlit s:
		match findinc(pp, s)
		| `std.Some found:
			path = found
		| `std.None:
			err(tok.loc, "{} not in include path\n", s)
		;;
	| _:
		err(tok.loc, "bad include, expected a string\n")
	;;
	tok = cppnextnoexp(pp)
	match tok.kind
	| `Tenddirective:
	| _:
		err(tok.loc, "junk '{}' at end of include directive\n", tok.text)
	;;
	ts = tokinit(path)
	pushts(pp, ts)
}

const validmacroparam = {s
	// XXX todo
	-> true
}

const dirdefine = {pp
	var toks, tok, name
	var isfuncmacro, mparams

	isfuncmacro = false
	mparams = [][:]	
	toks = [][:]
	
	tok = cppnextnoexp(pp)
	match tok.kind
	| `Tenddirective:
		err(tok.loc, "define expects something to define\n")
	| _:
		name = tok.text
		if std.hthas(pp.macros, name)
			err(tok.loc, "redefinition of macro {}\n", name)
		;;
	;;
	
	tok = peeknoexp(pp)
	match (tok.kind, tok.ws)
	| (`Toparen, false):
		cppnextnoexp(pp)
		isfuncmacro = true
		tok = cppnextnoexp(pp)
		match tok.kind
		| `Tcparen:
			goto gotparams
		| _:
		;;
		while true
			if !validmacroparam(tok.text)
				err(tok.loc, "{} is not a valid macro param\n", tok.text)
			;;
			std.slpush(&mparams, tok.text)
			tok = cppnextnoexp(pp)
			match tok.kind
			| `Tcomma:
			| _:
				break
			;;
			tok = cppnextnoexp(pp)
		;;
		:gotparams
		match tok.kind
		| `Tcparen:
		| _:
			err(tok.loc, "expected ')' to end macro param list\n")
		;;
	| _:
	;;
	
	while true
		tok = cppnextnoexp(pp)
		match tok.kind
		| `Tenddirective:
			break
		| _:
			std.slpush(&toks, tok)
		;;
	;;
	
	if isfuncmacro
		std.htput(pp.macros, name, `Mfunc std.mk([.params=mparams, .toks=toks]))
	else
		std.htput(pp.macros, name, `Mobj std.mk([.toks=toks]))
	;;
	
}

