use std
use "ctypes"

pkg qc = 
	
	type node = union
		`Nfunc func#
	;;
	
	type func = struct
		name : byte[:]
		rettype : ctype
		args : (byte[:], ctype)[:]
		body : stmt#[:]
		locals : local#[:]
		lblcnt : int
	;;
	
	type stmt = union
		`Sdecl decl
		`Sexpr expr#
		`Sreturn expr#
		`Sblock stmt#[:]
		`Sif ifstmt
		`Sfor forstmt
		`Swhile whilestmt
		`Sdowhile whilestmt
		`Slabeled labeledstmt
		`Sgoto int
		`Sempty
	;;
	
	type ifstmt = struct
		cond : expr#
		iftrue : stmt#
		iffalse : std.option(stmt#)
		truelbl : int
		falselbl : int
		donelbl : int
	;;
	
	type forstmt = struct
		init : std.option(expr#)
		cond : std.option(expr#)
		step : std.option(expr#)
		stmt : stmt#
		contlbl : int
		stmtlbl : int
		breaklbl : int
	;;
	
	type whilestmt = struct
		cond : expr#
		stmt : stmt#
		contlbl : int
		breaklbl : int
		stmtlbl : int
	;;

	type labeledstmt = struct
		stmt : stmt#
		lbl : int
	;;
	
	
	type expr = union
		`Ebinop binop
		`Eunop unop
		`Eassign assign
		`Eintlit int64
		`Eident sym
		`Eidx index
		`Esel selector
	;;
	
	type selector = struct
		ty : ctype
		expr : expr#
		off : uint32
	;;
	
	type index = struct
		ty : ctype
		expr : expr#
		idx : expr#
	;;
	
	type aop = union
		`Oasn
	;;
	
	type bop = union
		`Oplus
		`Ominus
		`Omul
		`Odiv
		`Omod
		`Oeq
		`One
		`Olt
		`Ogt
	;;
	
	type uop = union
		`Oaddr
		`Oderef
	;;
	
	type class = union
		`Sclasslocal
		`Sclassnone
	;;
	
	type binop = struct
		ty : ctype
		op : bop
		l : expr#
		r : expr#
	;;
	
	type unop = struct
		ty : ctype
		op : uop
		operand : expr#
	;;
	
	type assign = struct
		ty : ctype
		op : aop
		l : expr#
		r : expr#
	;;
	
	type decl = struct
		name : byte[:]
		sym : sym
	;;
	
	type sym = union 
		`Symlocal local#
	;;
	
	type local = struct
		name : byte[:]
		ty : ctype
	;;
	
	const nextlbl : (f : func# -> int)
	const exprtype : (e : expr# -> ctype)
;;



const nextlbl = {f
	-> f.lblcnt++
}

const exprtype = {e
	match e
	| &(`Esel sel):
		-> sel.ty
	| &(`Eident sym):
		match sym
		| `Symlocal local:
			-> local.ty
		| _:
		;;
	| _:
	;;
	-> `Typrim `Tyint
}
