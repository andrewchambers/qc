use std

pkg qc =
	type cprim = union
		`Tyint
		`Tyvoid
	;;

	type caggr = union
		`Typtr ctype
		`Tyarr carr
		`Tystruct cstruct
	;;
	
	type cstruct = struct
		membs : (std.option(byte[:]), ctype)[:]
	;;

	type carr = struct
		len : uint32
		subty : ctype
	;;

	type ctype = union
		`Typrim cprim
		`Tyaggr caggr#
	;;
	
	const typesize : (ty : ctype -> uint32)
	
;;

const typesize = {ty
	var sz

	match ty
	| `Typrim `Tyint:
		/* XXX wrong, but ok for now */
		-> 8
	| `Tyaggr &(`Typtr _):
		-> 8
	| `Tyaggr &(`Tyarr arr):
		-> arr.len * typesize(arr.subty)
	| `Tyaggr &(`Tystruct s):
		sz = 0
		for (_, membty) in s.membs
			sz += typesize(ty)
		;;
		-> sz
	| _:
	;;
	std.fatal("unimplemented typesize\n")
}
