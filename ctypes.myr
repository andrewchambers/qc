use std

pkg qc =

	type ctype = union
		`Tyvoid
		`Tylong
		`Tyllong
		`Tyint
		`Tyshort
		`Tychar
		`Tyulong
		`Tyullong
		`Tyuint
		`Tyushort
		`Tyuchar
		`Typtr ctype#
		`Tyarr carr#
		`Tystruct std.option(cstruct#)#
		`Tyenum std.option(cenum#)#
		`Tyfunc cfunc#
	;;

	type cenum = struct
		membs : std.htab(byte[:], int64)#
	;;

	type cstruct = struct
		isunion : bool
		align : uint32
		size : uint32
		membs : (std.option(byte[:]), ctype)[:]
		offsets : uint32[:]
		exports : std.htab(byte[:], structexport)#
	;;
	
	type structexport = struct
		ty : ctype
		offset : uint32
		path : exportpath
	;;

	type exportpath = union
		`Exportend int
		`Exportpath (int, exportpath#)
	;;
	
	type structiter = struct
		root : cstruct#
		pos : int[:]
	;;

	type carr = struct
		len : std.option(uint32)
		subty : ctype
	;;

	type cfunc = struct
		rty : ctype
		params : (std.option(byte[:]), ctype)[:]
		isvararg : bool
	;;
	
	const compatibletypes : (t1 : ctype, t2 : ctype -> bool)
	const sametype : (t1 : ctype, t2 : ctype -> bool)
	const isitype : (ty : ctype -> bool)
	const isptr : (ty : ctype -> bool)
	const isfunc : (ty : ctype -> bool)
	const isvoid : (ty : ctype -> bool)
	const typesize : (ty : ctype -> std.option(uint32))
	const typealign : (ty : ctype -> std.option(uint32))
	
	const addtostruct : (s : cstruct#, namety : (std.option(byte[:]), ctype) -> void)
	const finalizestruct : (s : cstruct# -> void)
	const structmemb : (s : cstruct#, name : byte[:] -> std.option(structexport))
	const getstructiter : (s : cstruct#, name : byte[:] -> std.option(structiter))
	const mkstructiter : (s : cstruct# -> structiter)
	const structiterwalk : (iter : structiter -> (std.option(byte[:]), uint32, ctype))
	const structiternext : (piter : structiter# -> bool)
;;


const typealign = {ty
	match ty
	| `Tychar: -> `std.Some 1
	| `Tyshort: -> `std.Some 2
	| `Tyint: -> `std.Some 4
	| `Tyenum _: -> `std.Some 4
	| `Tylong: -> `std.Some 8
	| `Tyllong: -> `std.Some 8
	| `Tyuchar: -> `std.Some 1
	| `Tyushort: -> `std.Some 2
	| `Tyuint: -> `std.Some 4
	| `Tyulong: -> `std.Some 8
	| `Tyullong: -> `std.Some 8
	| `Typtr _: -> `std.Some 8
	| `Tyarr arr: -> typealign(arr.subty)
	| `Tystruct &(`std.None): -> `std.None
	| `Tystruct &(`std.Some s): -> `std.Some s.align
	| _:
		std.fatal("unimplemented typealign\n")
	;;
}

const typesize = {ty
	match ty
	| `Tychar: -> `std.Some 1
	| `Tyshort: -> `std.Some 2
	| `Tyint: -> `std.Some 4
	| `Tyenum _: -> `std.Some 4
	| `Tylong: -> `std.Some 8
	| `Tyllong: -> `std.Some 8
	| `Tyuchar: -> `std.Some 1
	| `Tyushort: -> `std.Some 2
	| `Tyuint: -> `std.Some 4
	| `Tyulong: -> `std.Some 8
	| `Tyullong: -> `std.Some 8
	| `Typtr _: -> `std.Some 8
	| `Tyarr arr:
		match typesize(arr.subty)
		| `std.None: -> `std.None
		| `std.Some subtysz:
			match arr.len
			| `std.Some len: -> `std.Some (len * subtysz)
			| `std.None: -> `std.None
			;;
		;;
	| `Tystruct &(`std.None): -> `std.None
	| `Tystruct &(`std.Some s): -> `std.Some s.size
	| _:
		std.fatal("unimplemented typesize\n")
	;;
}

const isitype = {t
	match t
	| `Tychar: -> true
	| `Tyshort: -> true
	| `Tyenum _: -> true
	| `Tyint: -> true
	| `Tylong: -> true
	| `Tyllong: -> true
	| `Tyuchar: -> true
	| `Tyushort: -> true
	| `Tyuint: -> true
	| `Tyulong: -> true
	| `Tyullong: -> true
	| _: -> false
	;;
}

const isvoid = {t
	match t
	| `Tyvoid: -> true
	| _: -> false
	;;
}

const isptr = {t
	match t
	| `Typtr _: -> true
	| _: -> false
	;;
}

const isfunc = {t
	match t
	| `Tyfunc _: -> true
	| _: -> false
	;;
}

const sametype = {t1, t2
	match (t1, t2)
	| (`Tyvoid, `Tyvoid): -> true
	| (`Tychar, `Tychar): -> true
	| (`Tyshort,`Tyshort): -> true
	| (`Tyint, `Tyint): -> true
	| (`Tylong, `Tylong): -> true
	| (`Tyllong, `Tyllong): -> true
	| (`Tyuchar, `Tyuchar): -> true
	| (`Tyushort,`Tyushort): -> true
	| (`Tyuint, `Tyuint): -> true
	| (`Tyulong, `Tyulong): -> true
	| (`Tyullong, `Tyullong): -> true
	| (`Typtr sub1, `Typtr sub2): -> sametype(sub1#, sub2#)
	| (`Tyfunc f1, `Tyfunc f2): -> samefunctype(f1, f2)
	| (`Tystruct ptr1, `Tystruct ptr2): -> ptr1 == ptr2
	| (`Tyenum ptr1, `Tyenum ptr2): -> ptr1 == ptr2
	| _:
	;;
	-> false
}

const samefunctype = {f1, f2
	if !sametype(f1.rty, f2.rty)
		-> false
	;;
	
	if f1.isvararg != f2.isvararg 
		-> false
	;;
	
	if f1.params.len != f2.params.len
		-> false
	;;
	
	for ((_, t1), (_, t2)) in std.byzip(f1.params, f2.params)
		if !sametype(t1, t2)
			-> false
		;;
	;;
	-> true
}

const compatibletypes = {t1, t2
	if isitype(t1) && isitype(t2)
		-> true
	;;
	if isitype(t1) && isptr(t2)
		-> true
	;;
	if isptr(t1) && isitype(t2)
		-> true
	;;
	if isptr(t1) && isptr(t2)
		-> true
	;;
	if isptr(t1) && isfunc(t2)
		-> true
	;;
	if isfunc(t1) && isptr(t2)
		-> true
	;;
	match (t1, t2)
	| (`Typtr l, `Tyarr r):
		-> compatibletypes(l#, r.subty)
	| (`Tyarr l, `Typtr r):
		-> compatibletypes(l.subty, r#)
	| _:
	;;
	-> false
}

const alignoff = {v, a
	if v % a != 0
		-> v + a - (v % a)
	;;
	-> v
}

const addtostruct = {s, namety
	/* XXX: check if size is complete */
	std.slpush(&s.membs, namety)
}

const finalizestruct = {s
	var curoffset
	
	/* calc alignment */
	for (_, ty) in s.membs
		s.align = alignoff(s.align, std.get(typealign(ty)))
	;;
	
	/* calc member offsets */
	if s.isunion
		for (name, ty) in s.membs
			std.slpush(&s.offsets, 0)
			if std.get(typesize(ty)) > s.size
				s.size = std.get(typesize(ty))
			;;
		;;
	else
		curoffset = 0
		for (name, ty) in s.membs
			curoffset = alignoff(curoffset, std.get(typealign(ty)))
			std.slpush(&s.offsets, curoffset)
			curoffset += std.get(typesize(ty))
		;;
		s.size = curoffset
	;;
	/* exports */
	for (i, (name, ty)) in std.byenum(s.membs)
		match name
		| `std.None:
			match ty
			| `Tystruct &(`std.Some sub):
				for (xname, [.offset=xoff, .ty=xty, .path=xpath]) in std.byhtkeyvals(sub.exports)
					// XXX check for duplicates
					std.htput(s.exports, xname, [
						.offset=s.offsets[i]+xoff,
						.ty=xty,
						.path=`Exportpath ((i : int), std.mk(xpath)),
					])
				;;
			| _:
				continue
			;;
		| `std.Some n:
			// XXX check for duplicates
			std.htput(s.exports, n, [
				.offset=s.offsets[i],
				.ty=ty,
				.path=`Exportend (i : int),
			])
		;;
	;;
	s.size = alignoff(s.size, s.align)
}

const structmemb = {s, name
	-> std.htget(s.exports, name)
}

const mkstructiter = {s
	var iter
	
	iter.root = s
	iter.pos = [][:]
	std.slpush(&iter.pos, -1)
	-> iter
}

const getstructiter = {s, name
	var iter, p
	
	iter.root = s
	iter.pos = [][:]
	match structmemb(s, name)
	| `std.None:
		-> `std.None
	| `std.Some export:
		p = export.path
		while true
			match p
			| `Exportend v:
				std.slpush(&iter.pos, v)
				break
			| `Exportpath (v, next):
				std.slpush(&iter.pos, v)
				p = next#
			;;
		;;
	;;
	
	-> `std.Some iter
}

const _structiterwalk = {path, off, s
	var membname, memboff, membty
	
	(membname, membty) = s.membs[path[0]]
	memboff = s.offsets[path[0]]
	if path.len == 1
		-> (membname, off+memboff, membty)
	;;
	match membty
	| `Tystruct &(`std.Some submemb):
		-> _structiterwalk(path[1:], off+memboff, submemb)
	| _:
		std.fatal("internal error\n")
	;;
}

const structiterwalk = {iter
	-> _structiterwalk(iter.pos, 0, iter.root)
}

const structiternext = {piter
	var cur, name, ty
	
	if piter.pos.len == 0
		-> false
	;;
	
	if piter.pos.len == 1
		if piter.pos[0] == -1
			if piter.root.membs.len == 0
				-> false
			;;
			piter.pos[0] = 0
			-> true
		;;
		cur = piter.root
	else
		(_, _, ty) = _structiterwalk(piter.pos[:piter.pos.len-1], 0, piter.root)
		match ty
		| `Tystruct &(`std.Some s):
			cur = s
		| _:
			std.fatal("internal error\n")
		;;
	;;
	
	if cur.isunion
		std.slpop(&piter.pos)
		-> structiternext(piter)
	;;
	
	piter.pos[piter.pos.len-1]++
	if piter.pos[piter.pos.len-1] == cur.membs.len
		std.slpop(&piter.pos)
		-> structiternext(piter)
	;;
	while true
		(name, _, ty) = _structiterwalk(piter.pos, 0, piter.root)
		match name
		| `std.None:
			match ty
			| `Tystruct &(`std.Some s):
				if s.membs.len == 0
					-> structiternext(piter)
				;;
				std.slpush(&piter.pos, 0)
				continue
			| _:
			;;
		| `std.Some n:
		;;
		break
	;;
	-> true
}


