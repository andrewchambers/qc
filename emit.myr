use std

use "parse"
use "ctypes"
use "ast"
use "fold"

pkg qc =
	const emit : (globals : decl[:] -> void)
;;

type Val = union
	`Vlit int64
	/* number + optional human readable name */
	`Vreg (int, byte[:])
;;

type dataval = union
	`Dstr byte[:]
	`Dzero uint32
	`Dint constval
	`Dlong constval
	`Darr dataval[:]
;;

type data = struct
	isglobal : bool
	label : byte[:]
	val : dataval
;;

var allocas : std.htab(sym#, Val)#
var alreadyemitted : std.htab(byte[:], void)#
var pendingdata : data[:]

var nreg = 0
const newreg = {
	-> `Vreg (nreg++, [][:])
}

const fmtval = {sb, ap, opts
	var v : Val
	
	v = std.vanext(ap)
	match v
	| `Vlit n:
		std.sbfmt(sb, "{}", n) 
	| `Vreg (regnum, name):
		std.sbfmt(sb, "%v{}{}", regnum, name) 
	;;
}

const __init__ = {
	var v : Val
	
	v = `Vreg (0, [][:])
	std.fmtinstall(std.typeof(v), fmtval, [][:])
}

var datalblcount = 0
const nextdatalbl = {
	-> datalblcount++
}

const newnamedreg = {name
	-> `Vreg (nreg++, std.fmt(".{}", name))
}

const emit = {globals
	
	pendingdata = [][:]
	alreadyemitted = std.mkht(std.strhash, std.streq)
	
	for g in globals
		emitglobaldecl(g)
	;;
	emitpendingdata()
	
	std.htfree(alreadyemitted)
}

const emitglobaldecl = {decl
	for sym in decl.syms
		
		if std.hthas(alreadyemitted, sym.name)
			continue
		;;
		
		std.htput(alreadyemitted, sym.name, void)
		
		if isfunc(sym.ty)
			match sym.init
			| `std.None:
			| `std.Some `Initfunc f:
				match sym.sc
				| `Sclassglobal:
					emitfunc(f, true)
				| `Sclassstatic:
					emitfunc(f, false)
				| _:
					std.fatal("internal error\n")
				;;
			| _:
				std.fatal("internal error\n")
			;;
			continue
		;;
		
		match sym.init
		| `std.None:
			match sym.sc
			| `Sclasstypedef:
				continue
			| `Sclassextern:
				continue
			| `Sclassstatic:
				std.slpush(&pendingdata,  [
					.isglobal=false,
					.label=sym.name,
					.val=`Dzero std.get(typesize(sym.ty)),
				])
			| `Sclassglobal:
				std.slpush(&pendingdata,  [
					.isglobal=true,
					.label=sym.name,
					.val=`Dzero std.get(typesize(sym.ty)),
				])
			| _:
				std.fatal("internal error...\n")
			;;
		| `std.Some init:

			var isglobal
			
			match sym.sc
			| `Sclasstypedef:
				continue
			| `Sclassstatic:
				isglobal = false
			| `Sclassglobal:
				isglobal = true
			| _:
				std.fatal("internal error...\n")
			;;
			
			var d = [
				.isglobal=isglobal,
				.label=sym.name,
			]
			
			match init
			| `Initexpr expr:
				// XXX frontend doesn't check this...
				var c = std.get(foldexpr(expr))

				match exprtype(expr)
				| `Tyint:
					d.val = `Dint c
				| `Tylong:
					d.val = `Dlong c
				| `Typtr _:
					d.val = `Dlong c
				| _:
					std.fatal("unimplemented initializer type")
				;;
			| `Initblob blob:
				var arr = [][:]
				var curoff = 0
				for (off, ty, c) in blob.vals
					if off > curoff
						std.slpush(&arr, `Dzero off - curoff)
						curoff = off
					;;
					match ty
					| `Tyint:
						std.slpush(&arr, `Dint c)
					| `Tylong:
						std.slpush(&arr, `Dlong c)
					| `Typtr _:
						std.slpush(&arr, `Dlong c)
					| _:
						std.fatal("unimplemented initializer type")
					;;
					curoff += std.get(typesize(ty))
				;;
				d.val = `Darr arr
			| _:
				std.fatal("unimplemented initializer")
			;;
			
			std.slpush(&pendingdata, d)				
		;;
	;;
}

const vo = {msg : byte[:], ap : std.valist#
	var sb, ln

	sb = std.mksb()
	std.sbfmtv(sb, msg, ap)
	ln = std.sbfin(sb)
	match std.writeall(std.Out, ln)
	| (_ ,`std.Some _):
		std.fatal("error writing output\n")
	| _:
	;;
	std.slfree(ln)
}

var unreachable = false

/* output functions abbreviated due to frequent use */
const o = {msg : byte[:], args : ...
	var ap
	
	ap = std.vastart(&args)
	vo(msg, &ap)
}

/* out instruction */
const oi = {msg : byte[:], args : ...
	var ap
	
	if unreachable 
		-> void
	;;
	o("    ")
	ap = std.vastart(&args)
	vo(msg, &ap)
}

/* out label */
const ol = {msg : byte[:], args : ...
	var ap
	
	o("  ")
	ap = std.vastart(&args)
	vo(msg, &ap)
	unreachable = false
}

/* out terminator */
const ot = {msg : byte[:], args : ...
	var ap
	
	if unreachable
		-> void
	;;
	
	o("    ")
	ap = std.vastart(&args)
	vo(msg, &ap)
	unreachable = true
}

var curfunc
const emitfunc = {f, isglobal
	var alloca, namestoparamregs, reg
	
	curfunc = f
	allocas = std.mkht({x; -> (x : uint32)}, {x, y; -> x == y})
	nreg = 0
	
	if isglobal
		o("export\n")
	;;
	o("function {} ${}(", type2class(f.functy.rty), f.name)
	
	namestoparamregs = std.mkht(std.slhash, std.sleq)
	for var i = 0; i < f.functy.params.len; i++
		var name, ty
		(name, ty) = f.functy.params[i]
		match name
		| `std.Some n:
			reg = newnamedreg(n)
			o("l {}", reg)
			if i != f.functy.params.len - 1
				o(",")
			;;
			std.htput(namestoparamregs, n, reg)
		| `std.None:
			std.fatal("emit unimplemented param with no name\n")
		;;
	;;
	o(") {{\n")
	ol("@L{}\n", nextlbl(f))
	
	for l in f.locals
		alloca = newnamedreg(l.name)
		std.htput(allocas, l, alloca)
		oi("{} =l alloc16 {}\n", alloca, std.get(typesize(l.ty)))
	;;
	
	for param in f.params
		reg = std.get(std.htget(namestoparamregs, param.name))
		alloca = std.get(std.htget(allocas, param))
		emitstore(param.ty, alloca, reg)
	;;
	
	for stmt in f.body
		emitstmt(stmt)
	;;
	
	if !unreachable
		ot("ret\n")
	;;
	o("}}\n\n")
	std.htfree(allocas)
	std.htfree(namestoparamregs)
}

const type2class = {t
	match t
	| `Tychar: -> "w"
	| `Tyshort: -> "w"
	| `Tyint: -> "w"
	| `Tyenum _: -> "w"
	| `Tylong: -> "l"
	| `Tyllong: -> "l"
	| `Tyulong: -> "l"
	| `Tyullong: -> "l"
	| `Typtr _: -> "l"
	| `Tyvoid: -> ""
	| _:
		std.fatal("unhandled type2class type: {}\n", t)
	;;
}

const emitcall = {call
	var result, args, v
	var fptr, funcstr

	result = newreg()
	args = [][:]
	for arg in call.args
		v = emitexpr(arg)
		std.slpush(&args, v)
	;;
	
	match call.func
	| &(`Eident &([.name=name, .sc=`Sclassextern])):
		funcstr = std.fmt("${}", name)
	| &(`Eident &([.name=name, .sc=`Sclassglobal])):
		funcstr = std.fmt("${}", name)
	| _:
		fptr = emitexpr(call.func)
		funcstr = std.fmt("{}", fptr)
	;;
	
	oi("{} =l call {}(", result, funcstr)
	for var i = 0; i < args.len; i++
		var arg = args[i]
		o("{} {}", type2class(exprtype(call.args[i])), arg)
		if i != args.len-1
			o(",")
		;;
	;;
	o(")\n")
	
	-> result
}

const emitswitch = {sw
	var cond, eq
	var nlbl

	cond = emitexpr(sw.expr)
	eq = newreg()
	for (v, lbl) in sw.cases
		nlbl = nextlbl(curfunc)
		oi("{} =w ceq{} {}, {}\n", eq, type2class(exprtype(sw.expr)), cond, v)
		ot("jnz {}, @L{}, @L{}\n", eq, lbl, nlbl)
		ol("@L{}\n", nlbl)
	;;
	match sw.defaultlbl
	| `std.Some dlbl:
		ot("jmp @L{}\n", dlbl)
	| `std.None:
		ot("jmp @L{}\n", sw.breaklbl)
	;;
	emitstmt(sw.stmt)
	ol("@L{}\n", sw.breaklbl)
}

const emitstmt = {stmt
	var v
	
	match stmt
	| &(`Slabeled labeled):
		ol("@L{}\n", labeled.lbl)
		emitstmt(labeled.stmt)
	| &(`Sgoto lbl):
		ot("jmp @L{}\n", lbl)
	| &(`Sreturn `std.None):
		ot("ret\n")
	| &(`Sreturn `std.Some expr):
		v = emitexpr(expr)
		ot("ret {}\n", v)
	| &(`Sswitch sw):
		emitswitch(sw)
	| &(`Sexpr expr):
		emitexpr(expr)
	| &(`Sif ifsmt):
		emitif(ifsmt)
	| &(`Swhile whilestmt):
		emitwhile(whilestmt)
 	| &(`Sdowhile dowhilestmt):
		emitdowhile(dowhilestmt)
	| &(`Sfor forstmt):
		emitfor(forstmt)
	| &(`Sblock block):
		for substmt in block
			emitstmt(substmt)
		;;
	| &(`Sdecl _):
		/* do nothing for now */
	| &(`Sempty):
		/* empty */
	;;
}

const emitif = {ifstmt
	var cond
	
	cond = emitexpr(ifstmt.cond)
	ot("jnz {}, @L{}, @L{}\n", cond, ifstmt.truelbl, ifstmt.falselbl)
	ol("@L{}\n", ifstmt.truelbl)
	emitstmt(ifstmt.iftrue)
	ot("jmp @L{}\n", ifstmt.donelbl)
	ol("@L{}\n", ifstmt.falselbl)
	match ifstmt.iffalse
	| `std.Some iffalse:
		emitstmt(iffalse)
	| `std.None:
	;;
	ol("@L{}\n", ifstmt.donelbl)
}

const emitfor = {forstmt
	var cond
	
	match forstmt.init
	| `std.Some expr:
		emitexpr(expr)
	| `std.None:
	;;
	ol("@L{}\n", forstmt.contlbl)
	match forstmt.cond
	| `std.Some expr:
		cond = emitexpr(expr)
		ot("jnz {}, @L{}, @L{}\n", cond, forstmt.stmtlbl, forstmt.breaklbl)
	| `std.None:
		ot("jmp @L{}\n", forstmt.stmtlbl)
	;;
	ol("@L{}\n", forstmt.stmtlbl)
	emitstmt(forstmt.stmt)
	match forstmt.step
	| `std.Some expr:
		emitexpr(expr)
	| `std.None:
	;;
	ot("jmp @L{}\n", forstmt.contlbl)
	ol("@L{}\n", forstmt.breaklbl)
}

const emitwhile = {whilestmt
	var cond
	
	ol("@L{}\n", whilestmt.contlbl)
	cond = emitexpr(whilestmt.cond)
	ot("jnz {}, @L{}, @L{}\n", cond, whilestmt.stmtlbl, whilestmt.breaklbl)
	ol("@L{}\n", whilestmt.stmtlbl)
	emitstmt(whilestmt.stmt)
	ot("jmp @L{}\n", whilestmt.contlbl)
	ol("@L{}\n", whilestmt.breaklbl)
}

const emitdowhile = {whilestmt
	var cond
	
	ol("@L{}\n", whilestmt.stmtlbl)
	emitstmt(whilestmt.stmt)
	ol("@L{}\n", whilestmt.contlbl)
	cond = emitexpr(whilestmt.cond)
	ot("jnz {}, @L{}, @L{}\n", cond, whilestmt.stmtlbl, whilestmt.breaklbl)
	ol("@L{}\n", whilestmt.breaklbl)
}

const emitlval = {expr
	var v
	
	match expr
	| &(`Eident sym):
		match sym.sc
		| `Sclassextern:
			v = newreg()
			oi("{} =l copy ${}\n", v, sym.name)
			-> v
		| `Sclassstatic:
			v = newreg()
			oi("{} =l copy ${}\n", v, sym.name)
			-> v
		| `Sclassglobal:
			v = newreg()
			oi("{} =l copy ${}\n", v, sym.name)
			-> v
		| `Sclasslocal:
			-> std.get(std.htget(allocas, sym))
		| _:
			std.fatal("emitlval sym internal error symname={}\n", sym.name)
		;;
	| &(`Eunop [.op=`Oderef, .operand=operand]):
		-> emitexpr(operand)
	| &(`Eidx idx):
		-> emitlidx(idx)
	| &(`Esel sel):
		-> emitlsel(sel)
	| _:
		std.fatal("not an lval\n")
	;;
}

const emitload = {ty, val
	var v
	
	match ty
	| `Tyfunc _:
		-> val
	| `Tyarr _:
		-> val
	| `Tystruct _:
		-> val
	| _:
	;;
	
	v = newreg()
	match ty
	| `Tychar:
		oi("{} =w loadsb {}\n", v, val)
	| `Tyshort:
		oi("{} =w loadsh {}\n", v, val)
	| `Tyint:
		oi("{} =w load {}\n", v, val)
 	| `Tyenum _:
		oi("{} =w load {}\n", v, val)
	| `Tylong:
		oi("{} =l load {}\n", v, val)
	| `Tyllong:
		oi("{} =l load {}\n", v, val)
	| `Typtr _:
		oi("{} =l load {}\n", v, val)
	| `Tyullong:
		oi("{} =l loadl {}\n", v, val)
	| _:
		std.fatal("unimplemented load {}\n", ty)
	;;
	-> v
}

const emitstore = {ty, dst, v
	match ty
	| `Tychar:
		oi("storeb {}, {}\n", v, dst)
	| `Tyshort:
		oi("storeh {}, {}\n", v, dst)
	| `Tyint:
		oi("storew {}, {}\n", v, dst)
	| `Tyenum _:
		oi("storew {}, {}\n", v, dst)
	| `Tylong:
		oi("storel {}, {}\n", v, dst)
	| `Tyllong:
		oi("storel {}, {}\n", v, dst)
	| `Typtr _:
		oi("storel {}, {}\n", v, dst)
	| `Tyullong:
		oi("storel {}, {}\n", v, dst)
	| _:
		std.fatal("unimplemented store {}\n", ty)
	;;
}

const emitincdec = {incdec
	var v1, v2, v3
	var amnt, class
	
	v1 = emitlval(incdec.expr)
	v2 = emitload(exprtype(incdec.expr), v1)
	
	match exprtype(incdec.expr)
	| `Tychar:
		amnt = 1
		class = "w"
	| `Tyint:
		amnt = 1
		class = "w"
	| `Tylong:
		amnt = 1
		class = "l"
	| `Typtr &(ty):
		match typesize(ty)
		| `std.Some sz:
			amnt = sz
		| `std.None:
			std.fatal("internal error\n")
		;;
		class = "l"
	| _:
		std.fatal("unhandled incdec type\n")
	;;
	v3 = newreg()
	match incdec.op
	| `Opostinc:
		oi("{} ={} add {}, {}\n", v3, class, v2, amnt)
	| `Opostdec:
		oi("{} ={} sub {}, {}\n", v3, class, v2, amnt)
	| `Opreinc:
		oi("{} ={} add {}, {}\n", v3, class, v2, amnt)
	| `Opredec:
		oi("{} ={} sub {}, {}\n", v3, class, v2, amnt)
	;;
	
	emitstore(exprtype(incdec.expr), v1, v3)
	
	match incdec.op
	| `Opostinc:
		-> v2
	| `Opostdec:
		-> v2
	| `Opreinc:
		-> v3
	| `Opredec:
		-> v3
	;;
}

const emitcond = {condexpr
	var cond, result, class, iftrue, iffalse
	
	result = newreg()
	class = type2class(condexpr.ty)
	cond = emitexpr(condexpr.cond)
	ot("jnz {}, @L{}, @L{}\n", cond, condexpr.truelbl, condexpr.falselbl)
	ol("@L{}\n", condexpr.truelbl)
	iftrue = emitexpr(condexpr.iftrue)
	oi("{} ={} copy {}\n", result, class, iftrue)
	ot("jmp @L{}\n", condexpr.donelbl)
	ol("@L{}\n", condexpr.falselbl)
	iffalse = emitexpr(condexpr.iffalse)
	oi("{} ={} copy {}\n", result, class, iffalse)
	ol("@L{}\n", condexpr.donelbl)
	-> result
}

const emitexpr = {expr
	var v1

	match expr
	| &(`Econd cond):
		-> emitcond(cond)
	| &(`Ecall call):
		-> emitcall(call)
	| &(`Ecast cast):
		-> emitcast(cast)
	| &(`Ebinop b):
		-> emitbinop(b)
	| &(`Eptrarith b):
		-> emitptrarith(b)
	| &(`Eptrdiff b):
		-> emitptrdiff(b)
	| &(`Elogop b):
		-> emitlogop(b)
	| &(`Erelop b):
		-> emitrelop(b)
	| &(`Eidx idx):
		-> emitidx(idx)
	| &(`Esizeof sz):
		-> `Vlit (sz : int64)
	| &(`Eintlit v):
		-> `Vlit v
	| &(`Echrlit c):
		-> `Vlit (c : int64)
	| &(`Ewchrlit c):
		-> `Vlit (c : int64)
	| &(`Eincdec incdec):
		-> emitincdec(incdec)
	| &(`Eunop u):
		-> emitunop(u)
	| &(`Estrlit s):
		var d = [
			.isglobal=false,
			.label=std.fmt(".D{}", nextdatalbl()),
			.val=`Dstr s,
		]
		std.slpush(&pendingdata, d)
		v1 = newreg()
		oi("{} =l copy ${}\n", v1, d.label)
		-> v1
	| &(`Eident sym):
		match sym.sc
		| `Sclassenum:
			match sym.ty
			| `Tyenum &(`std.Some e):
				-> `Vlit std.get(std.htget(e.membs, sym.name))
			| _:
				std.fatal("internal error: sclass enum on non enum\n")
			;;
		| _:
			v1 = emitlval(expr)
			-> emitload(sym.ty, v1)
		;;
	| &(`Eassign assign):
		-> emitassign(assign)
	| &(`Esel sel):
		-> emitsel(sel)
	;;
}

const pointsto = {ptr
	match ptr
	| `Typtr &(t):
		-> t
	| _:
		std.fatal("internal error\n")
	;;
}

const emitptrarith = {arith
	var p, amnt, tysz
	
	tysz = std.get(typesize(pointsto(exprtype(arith.ptr))))
	amnt = emitexpr(arith.amnt)
	p = emitexpr(arith.ptr)
	-> emitptrarith2(arith.op, p, amnt, tysz)
}

const emitptrarith2 = {op, p, amnt, tysz
	var ins, offset, result
	
	match op
	| `Opadd: ins = "add"
	| `Opsub: ins = "sub"
	;;
	
	offset = newreg()
	oi("{} =l mul {}, {}\n", offset, amnt, tysz)
	result = newreg()
	oi("{} =l {} {}, {}\n", result, ins, p, offset)
	-> result
}

const emitptrdiff = {diff
	var l, r, amnt, result
	var tysz
	
	tysz = std.get(typesize(pointsto(exprtype(diff.l))))
	l = emitexpr(diff.l)
	r = emitexpr(diff.r)
	amnt = newreg()
	oi("{} =l sub {}, {}\n", amnt, l, r)
	result = newreg()
	oi("{} =l div {}, {}\n", result, amnt, tysz)
	-> result
}

const emitassign = {a
	var v1, v2, v3
	
	v1 = emitlval(a.l)
	v2 = emitexpr(a.r)
	match a.op
	| `Oasn:
		emitstore(a.ty, v1, v2)
		-> v2
	| _:
	;;
	
	v3 = emitload(a.ty, v1)
	match a.op
	| `Oaddasn:
		if isptr(a.ty)
			v3 = emitptrarith2(`Opadd, v3, v2, std.get(typesize(pointsto(a.ty))))
		else
			v3 = emitbinop2(`Oplus, a.ty, a.l, a.r)
		;;
	| `Osubasn:
		if isptr(a.ty)
			v3 = emitptrarith2(`Opsub, v3, v2, std.get(typesize(pointsto(a.ty))))
		else
			v3 = emitbinop2(`Ominus, a.ty, a.l, a.r)
		;;
	| `Obandasn:
		v3 = emitbinop2(`Oand, a.ty, a.l, a.r)
	| `Oborasn:
		v3 = emitbinop2(`Oor, a.ty, a.l, a.r)
	| `Oasn:
		std.fatal("internal error\n")		
	;;
	emitstore(a.ty, v1, v3)
	-> v3
}

const emitunop = {u
	var v1, v2, class
	var lone, lzero, lend
	
	class = type2class(u.ty)
	match u.op
	| `Oaddr:
		-> emitlval(u.operand)
	| `Oderef:
		v1 = emitexpr(u.operand)
		-> emitload(u.ty, v1)
	| `Olnot:
		v1 = emitexpr(u.operand)
		v2 = newreg()
		lone = nextlbl(curfunc)
		lzero = nextlbl(curfunc)
		lend = nextlbl(curfunc)
		ot("jnz {}, @L{}, @L{}\n", v1, lzero, lone)
		ol("@L{}\n", lone)
		oi("{} ={} copy 1\n", v2, class)
		ot("jmp @L{}\n", lend)
		ol("@L{}\n", lzero)
		oi("{} ={} copy 0\n", v2, class)
		ot("jmp @L{}\n", lend)
		ol("@L{}\n", lend)
		-> v2
	| `Oneg:
		v1 = emitexpr(u.operand)
		v2 = newreg()
		oi("{} ={} sub 0, {}\n", v2, class, v1)
		-> v2
	| `Obnot:
		var notconst : uint64
		
		v1 = emitexpr(u.operand)
		v2 = newreg()
		match class
		| "l":
			notconst = 0xffffffffffffffff
		| "w":
			notconst = 0xffffffff
		| _:
			std.fatal("internal error: not of unsupported class")
		;;
		oi("{} ={} xor {}, {}\n", v2, class, notconst, v1)
		-> v2
	| _:
		std.fatal("unsupported unop: {}\n", u.op)
	;;
}

const emitcast = {cast
	var v1, v2
	
	v1 = emitexpr(cast.expr)
	v2 = newreg()
	
	match exprtype(cast.expr)
	| `Tychar:
		match cast.ty
		| `Tychar:
			-> v1
		| `Tyshort:
			oi("{} =w extsb {}\n", v2, v1)
		| `Tyenum _:
			oi("{} =w extsb {}\n", v2, v1)
		| `Tyint:
			oi("{} =w extsb {}\n", v2, v1)
		| `Tylong:
			oi("{} =l extsb {}\n", v2, v1)
		| `Tyllong:
			oi("{} =l extsb {}\n", v2, v1)
		| `Typtr _:
			oi("{} =l extsb {}\n", v2, v1)
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v2
	| `Tyshort:
		match cast.ty
		| `Tychar:
			-> v1
		| `Tyshort:
			-> v1
		| `Tyenum _:
			oi("{} =w extsh {}\n", v2, v1)
		| `Tyint:
			oi("{} =w extsh {}\n", v2, v1)
		| `Tylong:
			oi("{} =l extsh {}\n", v2, v1)
		| `Tyllong:
			oi("{} =l extsh {}\n", v2, v1)
		| `Typtr _:
			oi("{} =l extsh {}\n", v2, v1)
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v2
	| `Tyenum _:
		match cast.ty
		| `Tychar:
			-> v1
		| `Tyshort:
			-> v1
		| `Tyenum _:
			-> v1
		| `Tyint:
			-> v1
		| `Tylong:
			oi("{} =l extsw {}\n", v2, v1)
		| `Tyllong:
			oi("{} =l extsw {}\n", v2, v1)
		| `Typtr _:
			oi("{} =l extsw {}\n", v2, v1)
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v2
	| `Tyint:
		match cast.ty
		| `Tychar:
			-> v1
		| `Tyshort:
			-> v1
		| `Tyenum _:
			-> v1
		| `Tyint:
			-> v1
		| `Tylong:
			oi("{} =l extsw {}\n", v2, v1)
		| `Tyllong:
			oi("{} =l extsw {}\n", v2, v1)
		| `Typtr _:
			oi("{} =l extsw {}\n", v2, v1)
		| `Tyulong:
			oi("{} =l extuw {}\n", v2, v1)
		| `Tyullong:
			oi("{} =l extuw {}\n", v2, v1)
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v2
	| `Tylong:
		// XXX: is it necessary to downcast to w?
		match cast.ty
		| `Tychar:
		| `Tyshort:
		| `Tyenum _:
		| `Tyint:
		| `Tylong:
		| `Typtr _:
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v1
	| `Tyllong:
		// XXX: is it necessary to downcast to w?
		match cast.ty
		| `Tychar:
		| `Tyshort:
		| `Tyenum _:
		| `Tyint:
		| `Tylong:
		| `Typtr _:
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v1
	| `Tyullong:
		// XXX: is it necessary to downcast to w?
		match cast.ty
		| `Tychar:
		| `Tyshort:
		| `Tyenum _:
		| `Tyint:
		| `Tylong:
		| `Tyllong:
		| `Typtr _:
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v1
	| `Typtr _:
		// XXX: is it necessary to downcast to w?
		match cast.ty
		| `Tychar:
		| `Tyshort:
		| `Tyenum _:
		| `Tyint:
		| `Tylong:
		| `Typtr _:
		| `Tyarr _:
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v1
	| `Tyarr _:
		// XXX: is it necessary to downcast to w?
		match cast.ty
		| `Tychar:
		| `Tyshort:
		| `Tyenum _:
		| `Tyint:
		| `Tylong:
		| `Typtr _:
		| `Tyarr _:
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v1
	| `Tyfunc _:
		match cast.ty
		| `Typtr _:
		| _:
			std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
		;;
		-> v1
	| _:
		std.fatal("unhandled cast: {} -> {}\n", exprtype(cast.expr), cast.ty)
	;;	
}

const emitlsel = {sel
	var v, p
	
	v = emitexpr(sel.expr)
	p = newreg()
	oi("{} =l add {}, {}\n", p, v, sel.off)
	-> p
}

const emitsel = {sel
	var p
	p = emitlsel(sel)
	-> emitload(sel.ty, p)
}

const emitlidx = {idx
	var v, tmp, i, p, off, sz
	
	v = emitexpr(idx.expr)
	tmp = emitexpr(idx.idx)
	match exprtype(idx.idx)
	| `Tyint:
		i = newreg()
		oi("{} =l extsw {}\n", i, tmp)
	| `Tylong:
		i = tmp
	| _:
		std.fatal("internal error\n")
	;;
	off = newreg()
	sz = std.get(typesize(idx.ty))
	oi("{} =l mul {}, {}\n", off, sz, i)
	p = newreg()
	oi("{} =l add {}, {}\n", p, v, off)
	-> p
}

const emitidx = {idx
	var p
	
	p = emitlidx(idx)
	-> emitload(idx.ty, p)
}

const emitlogop = {b
	var lrhs, lone, lzero, end
	var l, r
	var result
	
	result = newreg()
	lrhs = nextlbl(curfunc)
	lone = nextlbl(curfunc)
	lzero = nextlbl(curfunc)
	end = nextlbl(curfunc)
	
	l = emitexpr(b.l)
	match b.op
	| `Olor:
		ot("jnz {}, @L{}, @L{}\n", l, lone, lrhs)
	| `Oland:
		ot("jnz {}, @L{}, @L{}\n", l, lrhs, lzero)
	;;
	ol("@L{}\n", lrhs)
	r = emitexpr(b.r)
	match b.op
	| `Olor:
		ot("jnz {}, @L{}, @L{}\n", r, lone, lzero)
	| `Oland:
		ot("jnz {}, @L{}, @L{}\n", r, lone, lzero)
	;;

	ol("@L{}\n", lone)
	oi("{} =w copy 1\n", result)
	ot("jmp @L{}\n", end)
	ol("@L{}\n", lzero)
	oi("{} =w copy 0\n", result)
	ot("jmp @L{}\n", end)
	ol("@L{}\n", end)
	-> result
}


const emitbinop2 = {op, ty, lexpr, rexpr
	var l, r, o, result
	var class
	
	class = type2class(ty)
	
	l = emitexpr(lexpr)
	r = emitexpr(rexpr)
	result = newreg()
	match op
	| `Oplus:  o = "add"
	| `Ominus: o = "sub"
	| `Odiv:   o = "div"
	| `Omul:   o = "mul"
	| `Omod:   o = "rem"
	| `Oxor:   o = "xor"
	| `Oand:   o = "and"
	| `Oor:    o = "or"
	| `Oshl:   o = "shl"
	;;
	
	oi("{} ={} {} {}, {}\n", result, class, o, l, r)
	-> result
}

const emitbinop = {b
	-> emitbinop2(b.op, b.ty, b.l, b.r)
}

const emitrelop = {b
	var l, r, o, result
	var class
	
	class = type2class(exprtype(b.l))
	
	l = emitexpr(b.l)
	r = emitexpr(b.r)
	result = newreg()
	match b.op
	| `Oeq: o = "ceq"
	| `One: o = "cne"
	| `Olt: o = "cslt"
	| `Ogt: o = "csgt"
	| `Oge: o = "csge"
	| `Ole: o = "csle"
	;;
	
	oi("{} =w {}{} {}, {}\n", result, o, class, l, r)
	-> result
}


const emitpendingdata = {
	for data in pendingdata
		if data.isglobal
			o("export\n")
		;;
		match data.val
		| `Dzero sz:
			o("data ${} = {{z {}}}\n", data.label, sz)
		| `Dstr s:
			o("data ${} = {{b \"", data.label)
			for c in std.bychar(s)
				match c
				| '\\':
					o("\\\\")
				| '\n':
					o("\\n")
				| _:
					o("{}", c)
				;;	
			;;
			o("\", b 0}}\n")
		| `Dint c:
			match c
			| `Constint v:
				o("data ${} = {{w {}}}\n", data.label, v)
			| `Constptr (p, off):
				std.fatal("unimplemented...")
			;;
		| `Dlong c:
			match c
			| `Constint v:
				o("data ${} = {{l {}}}\n", data.label, v)
			| `Constptr (p, off):
				o("data ${} = {{l ${}+{}}}\n", data.label, p, off)
			;;
		| `Darr arr:
			o("data ${} = {{", data.label)
				for d in arr
					match d
					| `Dint c:
						match c
						| `Constint v:
							o("w {}, ", v)
						| `Constptr (p, off):
							o("w {}+{}, ", p, off)
						;;
					| `Dlong c:
						match c
						| `Constint v:
							o("l {}, ", v)
						| `Constptr (p, off):
							o("l ${}+{}, ", p, off)
						;;
					| `Dzero z:
						o("z {}, ", z)
					| _:
						std.fatal("unimplemented data array {}\n", d)
					;;
				;;
			o("}}\n")
		| _:
			std.fatal("unsupported data")
		;;
	;;
}
