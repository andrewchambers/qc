use std

use "tok"
use "cpp"
use "parse"
use "emit"

const main = {args
	var ts, cmd
	var incpath
	var sysincpaths

	incpath = "./"
	sysincpaths = [][:]
		
	cmd = std.optparse(args, &[
		.argdesc="file.c",
		.minargs=0,
		.maxargs=1,
		.opts=[
			[.opt='I', .arg="inc", .desc="add 'inc' to your include path"],
		][:]
	])
	
	for opt in cmd.opts
		match opt
		| ('I', inc): std.slpush(&sysincpaths, inc)
		| _:          std.fatal("unreachable {}\n", opt)
		;;
	;;
	
	match cmd.args.len
	| 0:
		ts = qc.tokinitf(std.In, "stdin")
	| _:
		incpath = std.dirname(cmd.args[0])
		ts = qc.tokinit(cmd.args[0])
	;;
	qc.emit(qc.parse(qc.mkcpp(ts, incpath, sysincpaths)))
}
