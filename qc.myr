use std

use "tok"
use "cpp"
use "parse"
use "emit"

const builtins = \
	"#define __extension__\n" \
	"#define __attribute__(X)\n" \
	"#define __builtin_va_list __qc_va_list\n" \
	"typedef struct {\n" \
	"    unsigned int gp_offset;\n" \
	"    unsigned int fp_offset;\n" \
	"    void *overflow_arg_area;\n" \
	"    void *reg_save_area;\n" \
	"} __qc_va_elem;\n" \
	"typedef __qc_va_elem __qc_va_list[1];\n"

const defineprelude = {defs
	var sb
	
	sb = std.mksb()
	
	for def : defs
		match std.strfind(def, "=")
		| `std.Some idx:
			std.sbfmt(sb, "#define {} {}\n", def[0:idx], def[idx+1:])
		| `std.None:
			std.sbfmt(sb, "#define {}\n", def)
		;;
	;;
	-> qc.tokinits(std.sbfin(sb), "<commandline>")
}

const main = {args
	var ts, cmd
	var incpath
	var sysincpaths
	var defs, pp

	incpath = "./"
	sysincpaths = [][:]
	defs = [][:]
		
	cmd = std.optparse(args, &[
		.argdesc="file.c",
		.minargs=0,
		.maxargs=1,
		.opts=[
			[.opt='I', .arg="inc", .desc="add 'inc' to your include path"],
			[.opt='D', .arg="def", .desc="define a macro in the preprocessor e.g. -Dfoo=bar"],
		][:]
	])
	
	for opt : cmd.opts
		match opt
		| ('I', inc): std.slpush(&sysincpaths, inc)
		| ('D', def): std.slpush(&defs, def)
		| _:          std.fatal("unreachable {}\n", opt)
		;;
	;;
	
	match cmd.args.len
	| 0:
		ts = qc.tokinitf(std.In, "stdin")
	| _:
		incpath = std.dirname(cmd.args[0])
		ts = qc.tokinit(cmd.args[0])
	;;
	pp = qc.mkcpp(incpath, sysincpaths)
	qc.cpppushts(pp, ts)
	qc.cpppushts(pp, defineprelude(defs))
	qc.cpppushts(pp, qc.tokinits(builtins, "<builtins>"))
	qc.emit(qc.parse(pp))
}
